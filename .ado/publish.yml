trigger: none
pr: none

parameters:
- name: Release_Type
  displayName: Release Type (major.minor.patch)
  type: string
  values:
  - major
  - minor
  - patch
  default: 'patch'

- name: Build_Type
  displayName: Build Type (major.minor.patch[.rc|.dev])
  type: string
  values:
  - dev
  - rc
  - stable
  default: 'dev'

- name: Publish_Python_Package_To_Build_Artifacts
  displayName: Publish Python package to Build's Artifacts
  type: boolean
  default: True

- name: Create_GitHub_Release
  displayName: Create GitHub-Release
  type: boolean
  default: False

- name: Publish_Python_Package_To_PyPi
  displayName: Publish Python package to PyPi
  type: boolean
  default: False

variables:
- name: OwnerPersonalAlias
  value: 'billti'

resources:
  repositories:
  - repository: 1ESPipelineTemplates
    type: git
    name: 1ESPipelineTemplates/1ESPipelineTemplates
    ref: refs/tags/release

extends:
  template: v1/1ES.Official.PipelineTemplate.yml@1ESPipelineTemplates
  parameters:
    pool:
      name: 'Azure-Pipelines-DevTools-EO'
      image: windows-latest
      os: windows
    stages:
    - stage: stage
      jobs:
      - job: "Build_Azure_Quantum_Python"
        displayName: Build "azure-quantum" package
        templateContext:
          outputs:
          - output: pipelineArtifact
            displayName: 'Upload "azure-quantum" artifacts'
            targetPath: $(Build.SourcesDirectory)/azure-quantum/target/wheels/
            artifactName: azure-quantum-wheels

        steps:
        - task: UsePythonVersion@0
          inputs:
            versionSpec: '3.11'
          displayName: Set Python version

        - script: |
            pip install wheel
          displayName: Install wheel

        - script: |
            pip freeze
          displayName: List installed packages

        - script: |
            python set_version.py
          env:
            BUILD_TYPE: ${{ parameters.Build_Type }}
            RELEASE_TYPE: ${{ parameters.Release_Type }}
          displayName: Set "azure-quantum" package version

        - script: |
            cd $(Build.SourcesDirectory)/azure-quantum
            python setup.py sdist --dist-dir=target/wheels
            python setup.py bdist_wheel --dist-dir=target/wheels
          displayName: Build "azure-quantum" package

      - job: "Test_Azure_Quantum_Python"
        displayName: Test "azure-quantum" package
        steps:
        - task: UsePythonVersion@0
          inputs:
            versionSpec: '3.11'
          displayName: Set Python version

        - script: |
            pip install pytest pytest-azurepipelines pytest-cov
          displayName: Install pytest dependencies

        - script: |
            pip freeze
          displayName: List installed packages

        - script: |
            cd $(Build.SourcesDirectory)/azure-quantum
            pip install .[all]
            pytest --cov-report term --cov=azure.quantum --junitxml test-output-azure-quantum.xml $(Build.SourcesDirectory)/azure-quantum
          displayName: Run Unit-tests

        - task: PublishTestResults@2
          displayName: 'Publish test results (python)'
          condition: succeededOrFailed()
          inputs:
            testResultsFormat: 'JUnit'
            testResultsFiles: '**/test-*.xml'
            testRunTitle: 'Azure Quantum Python Tests'

      - job: "Approval"
        displayName: Release approval
        dependsOn:
        - "Build_Azure_Quantum_Python"
        - "Test_Azure_Quantum_Python"
        pool: server
        timeoutInMinutes: 1440 # job times out in 1 day
        steps:
        - task: ManualValidation@0
          displayName: Manual release approval
          timeoutInMinutes: 1440
          inputs:
            notifyUsers: ''
            instructions: 'Please verify artifacts and approve the release'
            onTimeout: 'reject'

      - job: "Publish_Python_Packages"
        displayName: Publish "azure-quantum" package
        dependsOn: Approval
        templateContext:
          type: releaseJob
          isProduction: true
          inputs:
          - input: pipelineArtifact
            displayName: 'Download azure-quantum artifacts'
            targetPath: $(System.DefaultWorkingDirectory)/drop
            artifactName: azure-quantum-wheels
        steps:
        - task: UsePythonVersion@0
          inputs:
            versionSpec: '3.11'
          displayName: Set Python version

        - script: |
            python set_version.py
          env:
            BUILD_TYPE: ${{ parameters.Build_Type }}
            RELEASE_TYPE: ${{ parameters.Release_Type }}
          displayName: Set "azure-quantum" package version

        - task: CopyFiles@2
          condition: |
            or(
              ${{ parameters.Publish_Python_Package_To_Build_Artifacts }},
              ${{ parameters.Publish_Python_Package_To_PyPi }} 
            )
          displayName: Copy built "azure-quantum" package artifacts
          inputs:
            SourceFolder: '$(Pipeline.Workspace)/azure-quantum-wheels'
            Contents: '**'
            TargetFolder: '$(Build.ArtifactStagingDirectory)/target/wheels'

        - script: |
            ls $(Build.ArtifactStagingDirectory)/target/wheels/*
          displayName: List Py Artifacts to publish

        - task: GitHubRelease@1
          condition: ${{ parameters.Create_GitHub_Release }}
          displayName: Create GitHub Release
          inputs:
            gitHubConnection: AzureQuantumOauth
            repositoryName: Microsoft/azure-quantum-python
            action: create
            tagSource: 'userSpecifiedTag'
            tag: azure-quantum_v$(PYTHON_VERSION)
            isDraft: True
            isPreRelease: ${{ ne(parameters.Build_Type, 'stable') }}
            target: $(Build.SourceVersion)
            addChangeLog: False
            assets: |
              $(Build.ArtifactStagingDirectory)/target/wheels/*

        - task: EsrpRelease@4
          condition: ${{ parameters.Publish_Python_Package_To_PyPi }}
          displayName: Publish "azure-quantum" package to PyPi
          inputs:
            ConnectedServiceName: 'ESRP_Release'
            Intent: 'PackageDistribution'
            ContentType: 'PyPi'
            FolderLocation: '$(Build.ArtifactStagingDirectory)/target/wheels'
            Owners: '$(OwnerPersonalAlias)@microsoft.com' # NB: Group email here fails the task with non-actionable output.
            Approvers: 'billti@microsoft.com'
            ServiceEndpointUrl: 'https://api.esrp.microsoft.com'
            MainPublisher: 'QuantumDevelpmentKit'
            DomainTenantId: '72f988bf-86f1-41af-91ab-2d7cd011db47'