parameters:
- name: PackageName
  type: string
  default: 'azure-quantum'
- name: CondaEnvironmentSuffix
  type: string
  default: ''


# Running powershell scripts from a new, independent instance of pwsh
# prevents Azure Pipelines from interpreting the stderr stream from
# conda-build as an exception stream, making it easier to capture
# logging information without causing spurious failures.
#
# Note that any actual failures in conda-build can be detected by examining
# exit codes and by testing the artifacts produced by pack.ps1.
steps:
- pwsh: |
    (& "$(CondaPath)/conda" "shell.powershell" "hook") | Out-String | Invoke-Expression
    pwsh -NoProfile -Command ./bootstrap.ps1 `
       -PackageName '${{ parameters.PackageName }}' `
       -CondaEnvironmentSuffix '${{ parameters.CondaEnvironmentSuffix }}' `
       -FromSource $True
  displayName: Create ${{ parameters.PackageName }}${{ parameters.CondaEnvironmentSuffix}} conda environment and install ${{ parameters.PackageName }} package from source

- pwsh: |
    (& "$(CondaPath)/conda.exe" "shell.powershell" "hook") | Out-String | Invoke-Expression
    pwsh -NoProfile -Command build/pack.ps1 -PackageName ${{ parameters.PackageName }}
  displayName: Pack ${{ parameters.PackageName }}
  condition: eq(variables.CondaEnvironmentSuffix, '')

- pwsh: |
    (& "$(CondaPath)/conda.exe" "shell.powershell" "hook") | Out-String | Invoke-Expression
    pwsh -NoProfile -Command build/test.ps1 `
        -PackageName '${{ parameters.PackageName }}' `
        -CondaEnvironmentSuffix '${{ parameters.CondaEnvironmentSuffix}}'
  displayName: Test ${{ parameters.PackageName }}
