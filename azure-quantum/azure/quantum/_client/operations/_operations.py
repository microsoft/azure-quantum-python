# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import sys
from typing import Any, Callable, Dict, IO, Iterable, List, Optional, TypeVar, Union, cast, overload
import urllib.parse

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator import distributed_trace
from azure.core.utils import case_insensitive_dict

from .._serialization import Serializer
from .._vendor import _format_url_section

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports
if sys.version_info >= (3, 8):
    from typing import Literal  # pylint: disable=no-name-in-module, ungrouped-imports
else:
    from typing_extensions import Literal  # type: ignore  # pylint: disable=ungrouped-imports
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object
T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False


def build_jobs_list_request(
    subscription_id: str, resource_group_name: str, workspace_name: str, *, filter: Optional[str] = None, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: Literal["2022-09-12-preview"] = kwargs.pop(
        "api_version", _params.pop("api-version", "2022-09-12-preview")
    )
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/jobs"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "workspaceName": _SERIALIZER.url("workspace_name", workspace_name, "str"),
    }

    _url: str = _format_url_section(_url, **path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")
    if filter is not None:
        _params["filter"] = _SERIALIZER.query("filter", filter, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_jobs_get_request(
    job_id: str, subscription_id: str, resource_group_name: str, workspace_name: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: Literal["2022-09-12-preview"] = kwargs.pop(
        "api_version", _params.pop("api-version", "2022-09-12-preview")
    )
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/jobs/{jobId}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "workspaceName": _SERIALIZER.url("workspace_name", workspace_name, "str"),
        "jobId": _SERIALIZER.url(
            "job_id",
            job_id,
            "str",
            max_length=36,
            pattern=r"^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
        ),
    }

    _url: str = _format_url_section(_url, **path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_jobs_create_request(
    job_id: str, subscription_id: str, resource_group_name: str, workspace_name: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/jobs/{jobId}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "workspaceName": _SERIALIZER.url("workspace_name", workspace_name, "str"),
        "jobId": _SERIALIZER.url(
            "job_id",
            job_id,
            "str",
            max_length=36,
            pattern=r"^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
        ),
    }

    _url: str = _format_url_section(_url, **path_format_arguments)  # type: ignore

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PUT", url=_url, headers=_headers, **kwargs)


def build_jobs_cancel_request(
    job_id: str, subscription_id: str, resource_group_name: str, workspace_name: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/jobs/{jobId}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "workspaceName": _SERIALIZER.url("workspace_name", workspace_name, "str"),
        "jobId": _SERIALIZER.url(
            "job_id",
            job_id,
            "str",
            max_length=36,
            pattern=r"^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
        ),
    }

    _url: str = _format_url_section(_url, **path_format_arguments)  # type: ignore

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="DELETE", url=_url, headers=_headers, **kwargs)


def build_jobs_patch_request(
    job_id: str, subscription_id: str, resource_group_name: str, workspace_name: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/jobs/{jobId}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "workspaceName": _SERIALIZER.url("workspace_name", workspace_name, "str"),
        "jobId": _SERIALIZER.url(
            "job_id",
            job_id,
            "str",
            max_length=36,
            pattern=r"^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
        ),
    }

    _url: str = _format_url_section(_url, **path_format_arguments)  # type: ignore

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PATCH", url=_url, headers=_headers, **kwargs)


def build_providers_get_status_request(
    subscription_id: str, resource_group_name: str, workspace_name: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: Literal["2022-09-12-preview"] = kwargs.pop(
        "api_version", _params.pop("api-version", "2022-09-12-preview")
    )
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/providerStatus"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "workspaceName": _SERIALIZER.url("workspace_name", workspace_name, "str"),
    }

    _url: str = _format_url_section(_url, **path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_storage_sas_uri_request(
    subscription_id: str, resource_group_name: str, workspace_name: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: Literal["2022-09-12-preview"] = kwargs.pop(
        "api_version", _params.pop("api-version", "2022-09-12-preview")
    )
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/storage/sasUri"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "workspaceName": _SERIALIZER.url("workspace_name", workspace_name, "str"),
    }

    _url: str = _format_url_section(_url, **path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_quotas_list_request(
    subscription_id: str, resource_group_name: str, workspace_name: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: Literal["2022-09-12-preview"] = kwargs.pop(
        "api_version", _params.pop("api-version", "2022-09-12-preview")
    )
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/quotas"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "workspaceName": _SERIALIZER.url("workspace_name", workspace_name, "str"),
    }

    _url: str = _format_url_section(_url, **path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_sessions_list_request(
    subscription_id: str, resource_group_name: str, workspace_name: str, *, filter: Optional[str] = None, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: Literal["2022-09-12-preview"] = kwargs.pop(
        "api_version", _params.pop("api-version", "2022-09-12-preview")
    )
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/sessions"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "workspaceName": _SERIALIZER.url("workspace_name", workspace_name, "str"),
    }

    _url: str = _format_url_section(_url, **path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")
    if filter is not None:
        _params["filter"] = _SERIALIZER.query("filter", filter, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_sessions_get_request(
    session_id: str, subscription_id: str, resource_group_name: str, workspace_name: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: Literal["2022-09-12-preview"] = kwargs.pop(
        "api_version", _params.pop("api-version", "2022-09-12-preview")
    )
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/sessions/{sessionId}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "workspaceName": _SERIALIZER.url("workspace_name", workspace_name, "str"),
        "sessionId": _SERIALIZER.url(
            "session_id",
            session_id,
            "str",
            max_length=36,
            pattern=r"^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
        ),
    }

    _url: str = _format_url_section(_url, **path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_sessions_create_request(
    session_id: str, subscription_id: str, resource_group_name: str, workspace_name: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: Literal["2022-09-12-preview"] = kwargs.pop(
        "api_version", _params.pop("api-version", "2022-09-12-preview")
    )
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/sessions/{sessionId}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "workspaceName": _SERIALIZER.url("workspace_name", workspace_name, "str"),
        "sessionId": _SERIALIZER.url(
            "session_id",
            session_id,
            "str",
            max_length=36,
            pattern=r"^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
        ),
    }

    _url: str = _format_url_section(_url, **path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PUT", url=_url, params=_params, headers=_headers, **kwargs)


def build_sessions_end_request(
    session_id: str, subscription_id: str, resource_group_name: str, workspace_name: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: Literal["2022-09-12-preview"] = kwargs.pop(
        "api_version", _params.pop("api-version", "2022-09-12-preview")
    )
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/sessions/{sessionId}:end"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "workspaceName": _SERIALIZER.url("workspace_name", workspace_name, "str"),
        "sessionId": _SERIALIZER.url(
            "session_id",
            session_id,
            "str",
            max_length=36,
            pattern=r"^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
        ),
    }

    _url: str = _format_url_section(_url, **path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_sessions_jobs_list_request(
    session_id: str,
    subscription_id: str,
    resource_group_name: str,
    workspace_name: str,
    *,
    filter: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: Literal["2022-09-12-preview"] = kwargs.pop(
        "api_version", _params.pop("api-version", "2022-09-12-preview")
    )
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/sessions/{sessionId}/jobs"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "workspaceName": _SERIALIZER.url("workspace_name", workspace_name, "str"),
        "sessionId": _SERIALIZER.url(
            "session_id",
            session_id,
            "str",
            max_length=36,
            pattern=r"^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
        ),
    }

    _url: str = _format_url_section(_url, **path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")
    if filter is not None:
        _params["filter"] = _SERIALIZER.query("filter", filter, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_top_level_items_list_request(
    subscription_id: str, resource_group_name: str, workspace_name: str, *, filter: Optional[str] = None, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: Literal["2022-09-12-preview"] = kwargs.pop(
        "api_version", _params.pop("api-version", "2022-09-12-preview")
    )
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/topLevelItems"  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "workspaceName": _SERIALIZER.url("workspace_name", workspace_name, "str"),
    }

    _url: str = _format_url_section(_url, **path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")
    if filter is not None:
        _params["filter"] = _SERIALIZER.query("filter", filter, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


class JobsOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.quantum._client.QuantumClient`'s
        :attr:`jobs` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def list(self, *, filter: Optional[str] = None, **kwargs: Any) -> Iterable[JSON]:
        """List jobs.

        :keyword filter: OData filter expression supporting eq operator on id, name, providerId,
         target, status, itemType, jobType and lt/gt operators on creationTime, endExecutionTime.
         Default value is None.
        :paramtype filter: str
        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python
                # The response is polymorphic. The following are possible polymorphic responses based
                  off discriminator "itemType":

                # JSON input template for discriminator value "Job":
                item_details = {
                    "containerUri": "str",  # The blob container SAS uri, the container is used
                      to host job data. Required.
                    "id": "str",  # The id of the item. Required.
                    "inputDataFormat": "str",  # The format of the input data. Required.
                    "itemType": "Job",
                    "name": "str",  # The name of the item. It is not required for the name to be
                      unique and it's only used for display purposes. Required.
                    "providerId": "str",  # The unique identifier for the provider. Required.
                    "target": "str",  # The target identifier to run the job. Required.
                    "beginExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item began execution.
                    "cancellationTime": "2020-02-20 00:00:00",  # Optional. The time when a job
                      was successfully cancelled.
                    "costEstimate": {
                        "currencyCode": "str",  # Optional. The currency code.
                        "estimatedTotal": 0.0,  # Optional. The estimated total.
                        "events": [
                            {
                                "amountBilled": 0.0,  # Optional. The amount billed.
                                "amountConsumed": 0.0,  # Optional. The amount
                                  consumed.
                                "dimensionId": "str",  # Optional. The dimension id.
                                "dimensionName": "str",  # Optional. The dimension
                                  name.
                                "measureUnit": "str",  # Optional. The unit of
                                  measure.
                                "unitPrice": 0.0  # Optional. The unit price.
                            }
                        ]
                    },
                    "creationTime": "2020-02-20 00:00:00",  # Optional. The creation time of the
                      item.
                    "endExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item finished execution.
                    "errorData": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str"  # A message describing the error, intended to be
                          suitable for displaying in a user interface. Required.
                    },
                    "inputDataUri": "str",  # Optional. The input blob SAS uri, if specified, it
                      will override the default input blob in the container.
                    "inputParams": {},  # Optional. The input parameters for the job. JSON object
                      used by the target solver. It is expected that the size of this object is small
                      and only used to specify parameters for the execution target, not the input data.
                    "jobType": "str",  # Optional. The type of job. Known values are: "Unknown",
                      "QuantumComputing", "QuantumComputingBatch", and "Optimization".
                    "metadata": {
                        "str": "str"  # Optional. The job metadata. Metadata provides client
                          the ability to store client-specific information.
                    },
                    "outputDataFormat": "str",  # Optional. The format of the output data.
                    "outputDataUri": "str",  # Optional. The output blob SAS uri. When a job
                      finishes successfully, results will be uploaded to this blob.
                    "quantumComputingData": {
                        "count": 0  # Optional. The number of quantum computing items in the
                          job.
                    },
                    "sessionId": "str",  # Optional. The ID of the session that the job is part
                      of.
                    "status": "str",  # Optional. The status of the job. Known values are:
                      "Waiting", "Executing", "Succeeded", "Failed", and "Cancelled".
                    "tags": [
                        "str"  # Optional. List of user-supplied tags associated with the
                          job.
                    ]
                }

                # response body for status code(s): 200
                response == {
                    "containerUri": "str",  # The blob container SAS uri, the container is used
                      to host job data. Required.
                    "id": "str",  # The id of the item. Required.
                    "inputDataFormat": "str",  # The format of the input data. Required.
                    "itemType": "Job",
                    "name": "str",  # The name of the item. It is not required for the name to be
                      unique and it's only used for display purposes. Required.
                    "providerId": "str",  # The unique identifier for the provider. Required.
                    "target": "str",  # The target identifier to run the job. Required.
                    "beginExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item began execution.
                    "cancellationTime": "2020-02-20 00:00:00",  # Optional. The time when a job
                      was successfully cancelled.
                    "costEstimate": {
                        "currencyCode": "str",  # Optional. The currency code.
                        "estimatedTotal": 0.0,  # Optional. The estimated total.
                        "events": [
                            {
                                "amountBilled": 0.0,  # Optional. The amount billed.
                                "amountConsumed": 0.0,  # Optional. The amount
                                  consumed.
                                "dimensionId": "str",  # Optional. The dimension id.
                                "dimensionName": "str",  # Optional. The dimension
                                  name.
                                "measureUnit": "str",  # Optional. The unit of
                                  measure.
                                "unitPrice": 0.0  # Optional. The unit price.
                            }
                        ]
                    },
                    "creationTime": "2020-02-20 00:00:00",  # Optional. The creation time of the
                      item.
                    "endExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item finished execution.
                    "errorData": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str"  # A message describing the error, intended to be
                          suitable for displaying in a user interface. Required.
                    },
                    "inputDataUri": "str",  # Optional. The input blob SAS uri, if specified, it
                      will override the default input blob in the container.
                    "inputParams": {},  # Optional. The input parameters for the job. JSON object
                      used by the target solver. It is expected that the size of this object is small
                      and only used to specify parameters for the execution target, not the input data.
                    "jobType": "str",  # Optional. The type of job. Known values are: "Unknown",
                      "QuantumComputing", "QuantumComputingBatch", and "Optimization".
                    "metadata": {
                        "str": "str"  # Optional. The job metadata. Metadata provides client
                          the ability to store client-specific information.
                    },
                    "outputDataFormat": "str",  # Optional. The format of the output data.
                    "outputDataUri": "str",  # Optional. The output blob SAS uri. When a job
                      finishes successfully, results will be uploaded to this blob.
                    "quantumComputingData": {
                        "count": 0  # Optional. The number of quantum computing items in the
                          job.
                    },
                    "sessionId": "str",  # Optional. The ID of the session that the job is part
                      of.
                    "status": "str",  # Optional. The status of the job. Known values are:
                      "Waiting", "Executing", "Succeeded", "Failed", and "Cancelled".
                    "tags": [
                        "str"  # Optional. List of user-supplied tags associated with the
                          job.
                    ]
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                request = build_jobs_list_request(
                    subscription_id=self._config.subscription_id,
                    resource_group_name=self._config.resource_group_name,
                    workspace_name=self._config.workspace_name,
                    filter=filter,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                request.url = self._client.format_url(request.url)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                request.url = self._client.format_url(request.url)

            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=False, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return ItemPaged(get_next, extract_data)

    @distributed_trace
    def get(self, job_id: str, **kwargs: Any) -> JSON:
        """Get job by id.

        :param job_id: Id of the job. Required.
        :type job_id: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python
                # The response is polymorphic. The following are possible polymorphic responses based
                  off discriminator "itemType":

                # JSON input template for discriminator value "Job":
                item_details = {
                    "containerUri": "str",  # The blob container SAS uri, the container is used
                      to host job data. Required.
                    "id": "str",  # The id of the item. Required.
                    "inputDataFormat": "str",  # The format of the input data. Required.
                    "itemType": "Job",
                    "name": "str",  # The name of the item. It is not required for the name to be
                      unique and it's only used for display purposes. Required.
                    "providerId": "str",  # The unique identifier for the provider. Required.
                    "target": "str",  # The target identifier to run the job. Required.
                    "beginExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item began execution.
                    "cancellationTime": "2020-02-20 00:00:00",  # Optional. The time when a job
                      was successfully cancelled.
                    "costEstimate": {
                        "currencyCode": "str",  # Optional. The currency code.
                        "estimatedTotal": 0.0,  # Optional. The estimated total.
                        "events": [
                            {
                                "amountBilled": 0.0,  # Optional. The amount billed.
                                "amountConsumed": 0.0,  # Optional. The amount
                                  consumed.
                                "dimensionId": "str",  # Optional. The dimension id.
                                "dimensionName": "str",  # Optional. The dimension
                                  name.
                                "measureUnit": "str",  # Optional. The unit of
                                  measure.
                                "unitPrice": 0.0  # Optional. The unit price.
                            }
                        ]
                    },
                    "creationTime": "2020-02-20 00:00:00",  # Optional. The creation time of the
                      item.
                    "endExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item finished execution.
                    "errorData": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str"  # A message describing the error, intended to be
                          suitable for displaying in a user interface. Required.
                    },
                    "inputDataUri": "str",  # Optional. The input blob SAS uri, if specified, it
                      will override the default input blob in the container.
                    "inputParams": {},  # Optional. The input parameters for the job. JSON object
                      used by the target solver. It is expected that the size of this object is small
                      and only used to specify parameters for the execution target, not the input data.
                    "jobType": "str",  # Optional. The type of job. Known values are: "Unknown",
                      "QuantumComputing", "QuantumComputingBatch", and "Optimization".
                    "metadata": {
                        "str": "str"  # Optional. The job metadata. Metadata provides client
                          the ability to store client-specific information.
                    },
                    "outputDataFormat": "str",  # Optional. The format of the output data.
                    "outputDataUri": "str",  # Optional. The output blob SAS uri. When a job
                      finishes successfully, results will be uploaded to this blob.
                    "quantumComputingData": {
                        "count": 0  # Optional. The number of quantum computing items in the
                          job.
                    },
                    "sessionId": "str",  # Optional. The ID of the session that the job is part
                      of.
                    "status": "str",  # Optional. The status of the job. Known values are:
                      "Waiting", "Executing", "Succeeded", "Failed", and "Cancelled".
                    "tags": [
                        "str"  # Optional. List of user-supplied tags associated with the
                          job.
                    ]
                }

                # response body for status code(s): 200
                response == {
                    "containerUri": "str",  # The blob container SAS uri, the container is used
                      to host job data. Required.
                    "id": "str",  # The id of the item. Required.
                    "inputDataFormat": "str",  # The format of the input data. Required.
                    "itemType": "Job",
                    "name": "str",  # The name of the item. It is not required for the name to be
                      unique and it's only used for display purposes. Required.
                    "providerId": "str",  # The unique identifier for the provider. Required.
                    "target": "str",  # The target identifier to run the job. Required.
                    "beginExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item began execution.
                    "cancellationTime": "2020-02-20 00:00:00",  # Optional. The time when a job
                      was successfully cancelled.
                    "costEstimate": {
                        "currencyCode": "str",  # Optional. The currency code.
                        "estimatedTotal": 0.0,  # Optional. The estimated total.
                        "events": [
                            {
                                "amountBilled": 0.0,  # Optional. The amount billed.
                                "amountConsumed": 0.0,  # Optional. The amount
                                  consumed.
                                "dimensionId": "str",  # Optional. The dimension id.
                                "dimensionName": "str",  # Optional. The dimension
                                  name.
                                "measureUnit": "str",  # Optional. The unit of
                                  measure.
                                "unitPrice": 0.0  # Optional. The unit price.
                            }
                        ]
                    },
                    "creationTime": "2020-02-20 00:00:00",  # Optional. The creation time of the
                      item.
                    "endExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item finished execution.
                    "errorData": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str"  # A message describing the error, intended to be
                          suitable for displaying in a user interface. Required.
                    },
                    "inputDataUri": "str",  # Optional. The input blob SAS uri, if specified, it
                      will override the default input blob in the container.
                    "inputParams": {},  # Optional. The input parameters for the job. JSON object
                      used by the target solver. It is expected that the size of this object is small
                      and only used to specify parameters for the execution target, not the input data.
                    "jobType": "str",  # Optional. The type of job. Known values are: "Unknown",
                      "QuantumComputing", "QuantumComputingBatch", and "Optimization".
                    "metadata": {
                        "str": "str"  # Optional. The job metadata. Metadata provides client
                          the ability to store client-specific information.
                    },
                    "outputDataFormat": "str",  # Optional. The format of the output data.
                    "outputDataUri": "str",  # Optional. The output blob SAS uri. When a job
                      finishes successfully, results will be uploaded to this blob.
                    "quantumComputingData": {
                        "count": 0  # Optional. The number of quantum computing items in the
                          job.
                    },
                    "sessionId": "str",  # Optional. The ID of the session that the job is part
                      of.
                    "status": "str",  # Optional. The status of the job. Known values are:
                      "Waiting", "Executing", "Succeeded", "Failed", and "Cancelled".
                    "tags": [
                        "str"  # Optional. List of user-supplied tags associated with the
                          job.
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        request = build_jobs_get_request(
            job_id=job_id,
            subscription_id=self._config.subscription_id,
            resource_group_name=self._config.resource_group_name,
            workspace_name=self._config.workspace_name,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @overload
    def create(self, job_id: str, job: JSON, *, content_type: str = "application/json", **kwargs: Any) -> JSON:
        """Create a job.

        :param job_id: Id of the job. Required.
        :type job_id: str
        :param job: The complete metadata of the job to submit. Required.
        :type job: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # The input is polymorphic. The following are possible polymorphic inputs based off
                  discriminator "itemType":

                # JSON input template for discriminator value "Job":
                item_details = {
                    "containerUri": "str",  # The blob container SAS uri, the container is used
                      to host job data. Required.
                    "id": "str",  # The id of the item. Required.
                    "inputDataFormat": "str",  # The format of the input data. Required.
                    "itemType": "Job",
                    "name": "str",  # The name of the item. It is not required for the name to be
                      unique and it's only used for display purposes. Required.
                    "providerId": "str",  # The unique identifier for the provider. Required.
                    "target": "str",  # The target identifier to run the job. Required.
                    "beginExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item began execution.
                    "cancellationTime": "2020-02-20 00:00:00",  # Optional. The time when a job
                      was successfully cancelled.
                    "costEstimate": {
                        "currencyCode": "str",  # Optional. The currency code.
                        "estimatedTotal": 0.0,  # Optional. The estimated total.
                        "events": [
                            {
                                "amountBilled": 0.0,  # Optional. The amount billed.
                                "amountConsumed": 0.0,  # Optional. The amount
                                  consumed.
                                "dimensionId": "str",  # Optional. The dimension id.
                                "dimensionName": "str",  # Optional. The dimension
                                  name.
                                "measureUnit": "str",  # Optional. The unit of
                                  measure.
                                "unitPrice": 0.0  # Optional. The unit price.
                            }
                        ]
                    },
                    "creationTime": "2020-02-20 00:00:00",  # Optional. The creation time of the
                      item.
                    "endExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item finished execution.
                    "errorData": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str"  # A message describing the error, intended to be
                          suitable for displaying in a user interface. Required.
                    },
                    "inputDataUri": "str",  # Optional. The input blob SAS uri, if specified, it
                      will override the default input blob in the container.
                    "inputParams": {},  # Optional. The input parameters for the job. JSON object
                      used by the target solver. It is expected that the size of this object is small
                      and only used to specify parameters for the execution target, not the input data.
                    "jobType": "str",  # Optional. The type of job. Known values are: "Unknown",
                      "QuantumComputing", "QuantumComputingBatch", and "Optimization".
                    "metadata": {
                        "str": "str"  # Optional. The job metadata. Metadata provides client
                          the ability to store client-specific information.
                    },
                    "outputDataFormat": "str",  # Optional. The format of the output data.
                    "outputDataUri": "str",  # Optional. The output blob SAS uri. When a job
                      finishes successfully, results will be uploaded to this blob.
                    "quantumComputingData": {
                        "count": 0  # Optional. The number of quantum computing items in the
                          job.
                    },
                    "sessionId": "str",  # Optional. The ID of the session that the job is part
                      of.
                    "status": "str",  # Optional. The status of the job. Known values are:
                      "Waiting", "Executing", "Succeeded", "Failed", and "Cancelled".
                    "tags": [
                        "str"  # Optional. List of user-supplied tags associated with the
                          job.
                    ]
                }

                # JSON input template you can fill out and use as your body input.
                job = {
                    "containerUri": "str",  # The blob container SAS uri, the container is used
                      to host job data. Required.
                    "id": "str",  # The id of the item. Required.
                    "inputDataFormat": "str",  # The format of the input data. Required.
                    "itemType": "Job",
                    "name": "str",  # The name of the item. It is not required for the name to be
                      unique and it's only used for display purposes. Required.
                    "providerId": "str",  # The unique identifier for the provider. Required.
                    "target": "str",  # The target identifier to run the job. Required.
                    "beginExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item began execution.
                    "cancellationTime": "2020-02-20 00:00:00",  # Optional. The time when a job
                      was successfully cancelled.
                    "costEstimate": {
                        "currencyCode": "str",  # Optional. The currency code.
                        "estimatedTotal": 0.0,  # Optional. The estimated total.
                        "events": [
                            {
                                "amountBilled": 0.0,  # Optional. The amount billed.
                                "amountConsumed": 0.0,  # Optional. The amount
                                  consumed.
                                "dimensionId": "str",  # Optional. The dimension id.
                                "dimensionName": "str",  # Optional. The dimension
                                  name.
                                "measureUnit": "str",  # Optional. The unit of
                                  measure.
                                "unitPrice": 0.0  # Optional. The unit price.
                            }
                        ]
                    },
                    "creationTime": "2020-02-20 00:00:00",  # Optional. The creation time of the
                      item.
                    "endExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item finished execution.
                    "errorData": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str"  # A message describing the error, intended to be
                          suitable for displaying in a user interface. Required.
                    },
                    "inputDataUri": "str",  # Optional. The input blob SAS uri, if specified, it
                      will override the default input blob in the container.
                    "inputParams": {},  # Optional. The input parameters for the job. JSON object
                      used by the target solver. It is expected that the size of this object is small
                      and only used to specify parameters for the execution target, not the input data.
                    "jobType": "str",  # Optional. The type of job. Known values are: "Unknown",
                      "QuantumComputing", "QuantumComputingBatch", and "Optimization".
                    "metadata": {
                        "str": "str"  # Optional. The job metadata. Metadata provides client
                          the ability to store client-specific information.
                    },
                    "outputDataFormat": "str",  # Optional. The format of the output data.
                    "outputDataUri": "str",  # Optional. The output blob SAS uri. When a job
                      finishes successfully, results will be uploaded to this blob.
                    "quantumComputingData": {
                        "count": 0  # Optional. The number of quantum computing items in the
                          job.
                    },
                    "sessionId": "str",  # Optional. The ID of the session that the job is part
                      of.
                    "status": "str",  # Optional. The status of the job. Known values are:
                      "Waiting", "Executing", "Succeeded", "Failed", and "Cancelled".
                    "tags": [
                        "str"  # Optional. List of user-supplied tags associated with the
                          job.
                    ]
                }
                # The response is polymorphic. The following are possible polymorphic responses based
                  off discriminator "itemType":

                # JSON input template for discriminator value "Job":
                item_details = {
                    "containerUri": "str",  # The blob container SAS uri, the container is used
                      to host job data. Required.
                    "id": "str",  # The id of the item. Required.
                    "inputDataFormat": "str",  # The format of the input data. Required.
                    "itemType": "Job",
                    "name": "str",  # The name of the item. It is not required for the name to be
                      unique and it's only used for display purposes. Required.
                    "providerId": "str",  # The unique identifier for the provider. Required.
                    "target": "str",  # The target identifier to run the job. Required.
                    "beginExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item began execution.
                    "cancellationTime": "2020-02-20 00:00:00",  # Optional. The time when a job
                      was successfully cancelled.
                    "costEstimate": {
                        "currencyCode": "str",  # Optional. The currency code.
                        "estimatedTotal": 0.0,  # Optional. The estimated total.
                        "events": [
                            {
                                "amountBilled": 0.0,  # Optional. The amount billed.
                                "amountConsumed": 0.0,  # Optional. The amount
                                  consumed.
                                "dimensionId": "str",  # Optional. The dimension id.
                                "dimensionName": "str",  # Optional. The dimension
                                  name.
                                "measureUnit": "str",  # Optional. The unit of
                                  measure.
                                "unitPrice": 0.0  # Optional. The unit price.
                            }
                        ]
                    },
                    "creationTime": "2020-02-20 00:00:00",  # Optional. The creation time of the
                      item.
                    "endExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item finished execution.
                    "errorData": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str"  # A message describing the error, intended to be
                          suitable for displaying in a user interface. Required.
                    },
                    "inputDataUri": "str",  # Optional. The input blob SAS uri, if specified, it
                      will override the default input blob in the container.
                    "inputParams": {},  # Optional. The input parameters for the job. JSON object
                      used by the target solver. It is expected that the size of this object is small
                      and only used to specify parameters for the execution target, not the input data.
                    "jobType": "str",  # Optional. The type of job. Known values are: "Unknown",
                      "QuantumComputing", "QuantumComputingBatch", and "Optimization".
                    "metadata": {
                        "str": "str"  # Optional. The job metadata. Metadata provides client
                          the ability to store client-specific information.
                    },
                    "outputDataFormat": "str",  # Optional. The format of the output data.
                    "outputDataUri": "str",  # Optional. The output blob SAS uri. When a job
                      finishes successfully, results will be uploaded to this blob.
                    "quantumComputingData": {
                        "count": 0  # Optional. The number of quantum computing items in the
                          job.
                    },
                    "sessionId": "str",  # Optional. The ID of the session that the job is part
                      of.
                    "status": "str",  # Optional. The status of the job. Known values are:
                      "Waiting", "Executing", "Succeeded", "Failed", and "Cancelled".
                    "tags": [
                        "str"  # Optional. List of user-supplied tags associated with the
                          job.
                    ]
                }
                # The response is polymorphic. The following are possible polymorphic responses based
                  off discriminator "itemType":

                # JSON input template for discriminator value "Job":
                item_details = {
                    "containerUri": "str",  # The blob container SAS uri, the container is used
                      to host job data. Required.
                    "id": "str",  # The id of the item. Required.
                    "inputDataFormat": "str",  # The format of the input data. Required.
                    "itemType": "Job",
                    "name": "str",  # The name of the item. It is not required for the name to be
                      unique and it's only used for display purposes. Required.
                    "providerId": "str",  # The unique identifier for the provider. Required.
                    "target": "str",  # The target identifier to run the job. Required.
                    "beginExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item began execution.
                    "cancellationTime": "2020-02-20 00:00:00",  # Optional. The time when a job
                      was successfully cancelled.
                    "costEstimate": {
                        "currencyCode": "str",  # Optional. The currency code.
                        "estimatedTotal": 0.0,  # Optional. The estimated total.
                        "events": [
                            {
                                "amountBilled": 0.0,  # Optional. The amount billed.
                                "amountConsumed": 0.0,  # Optional. The amount
                                  consumed.
                                "dimensionId": "str",  # Optional. The dimension id.
                                "dimensionName": "str",  # Optional. The dimension
                                  name.
                                "measureUnit": "str",  # Optional. The unit of
                                  measure.
                                "unitPrice": 0.0  # Optional. The unit price.
                            }
                        ]
                    },
                    "creationTime": "2020-02-20 00:00:00",  # Optional. The creation time of the
                      item.
                    "endExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item finished execution.
                    "errorData": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str"  # A message describing the error, intended to be
                          suitable for displaying in a user interface. Required.
                    },
                    "inputDataUri": "str",  # Optional. The input blob SAS uri, if specified, it
                      will override the default input blob in the container.
                    "inputParams": {},  # Optional. The input parameters for the job. JSON object
                      used by the target solver. It is expected that the size of this object is small
                      and only used to specify parameters for the execution target, not the input data.
                    "jobType": "str",  # Optional. The type of job. Known values are: "Unknown",
                      "QuantumComputing", "QuantumComputingBatch", and "Optimization".
                    "metadata": {
                        "str": "str"  # Optional. The job metadata. Metadata provides client
                          the ability to store client-specific information.
                    },
                    "outputDataFormat": "str",  # Optional. The format of the output data.
                    "outputDataUri": "str",  # Optional. The output blob SAS uri. When a job
                      finishes successfully, results will be uploaded to this blob.
                    "quantumComputingData": {
                        "count": 0  # Optional. The number of quantum computing items in the
                          job.
                    },
                    "sessionId": "str",  # Optional. The ID of the session that the job is part
                      of.
                    "status": "str",  # Optional. The status of the job. Known values are:
                      "Waiting", "Executing", "Succeeded", "Failed", and "Cancelled".
                    "tags": [
                        "str"  # Optional. List of user-supplied tags associated with the
                          job.
                    ]
                }

                # response body for status code(s): 200, 201
                response == {
                    "containerUri": "str",  # The blob container SAS uri, the container is used
                      to host job data. Required.
                    "id": "str",  # The id of the item. Required.
                    "inputDataFormat": "str",  # The format of the input data. Required.
                    "itemType": "Job",
                    "name": "str",  # The name of the item. It is not required for the name to be
                      unique and it's only used for display purposes. Required.
                    "providerId": "str",  # The unique identifier for the provider. Required.
                    "target": "str",  # The target identifier to run the job. Required.
                    "beginExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item began execution.
                    "cancellationTime": "2020-02-20 00:00:00",  # Optional. The time when a job
                      was successfully cancelled.
                    "costEstimate": {
                        "currencyCode": "str",  # Optional. The currency code.
                        "estimatedTotal": 0.0,  # Optional. The estimated total.
                        "events": [
                            {
                                "amountBilled": 0.0,  # Optional. The amount billed.
                                "amountConsumed": 0.0,  # Optional. The amount
                                  consumed.
                                "dimensionId": "str",  # Optional. The dimension id.
                                "dimensionName": "str",  # Optional. The dimension
                                  name.
                                "measureUnit": "str",  # Optional. The unit of
                                  measure.
                                "unitPrice": 0.0  # Optional. The unit price.
                            }
                        ]
                    },
                    "creationTime": "2020-02-20 00:00:00",  # Optional. The creation time of the
                      item.
                    "endExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item finished execution.
                    "errorData": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str"  # A message describing the error, intended to be
                          suitable for displaying in a user interface. Required.
                    },
                    "inputDataUri": "str",  # Optional. The input blob SAS uri, if specified, it
                      will override the default input blob in the container.
                    "inputParams": {},  # Optional. The input parameters for the job. JSON object
                      used by the target solver. It is expected that the size of this object is small
                      and only used to specify parameters for the execution target, not the input data.
                    "jobType": "str",  # Optional. The type of job. Known values are: "Unknown",
                      "QuantumComputing", "QuantumComputingBatch", and "Optimization".
                    "metadata": {
                        "str": "str"  # Optional. The job metadata. Metadata provides client
                          the ability to store client-specific information.
                    },
                    "outputDataFormat": "str",  # Optional. The format of the output data.
                    "outputDataUri": "str",  # Optional. The output blob SAS uri. When a job
                      finishes successfully, results will be uploaded to this blob.
                    "quantumComputingData": {
                        "count": 0  # Optional. The number of quantum computing items in the
                          job.
                    },
                    "sessionId": "str",  # Optional. The ID of the session that the job is part
                      of.
                    "status": "str",  # Optional. The status of the job. Known values are:
                      "Waiting", "Executing", "Succeeded", "Failed", and "Cancelled".
                    "tags": [
                        "str"  # Optional. List of user-supplied tags associated with the
                          job.
                    ]
                }
        """

    @overload
    def create(self, job_id: str, job: IO, *, content_type: str = "application/json", **kwargs: Any) -> JSON:
        """Create a job.

        :param job_id: Id of the job. Required.
        :type job_id: str
        :param job: The complete metadata of the job to submit. Required.
        :type job: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python
                # The response is polymorphic. The following are possible polymorphic responses based
                  off discriminator "itemType":

                # JSON input template for discriminator value "Job":
                item_details = {
                    "containerUri": "str",  # The blob container SAS uri, the container is used
                      to host job data. Required.
                    "id": "str",  # The id of the item. Required.
                    "inputDataFormat": "str",  # The format of the input data. Required.
                    "itemType": "Job",
                    "name": "str",  # The name of the item. It is not required for the name to be
                      unique and it's only used for display purposes. Required.
                    "providerId": "str",  # The unique identifier for the provider. Required.
                    "target": "str",  # The target identifier to run the job. Required.
                    "beginExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item began execution.
                    "cancellationTime": "2020-02-20 00:00:00",  # Optional. The time when a job
                      was successfully cancelled.
                    "costEstimate": {
                        "currencyCode": "str",  # Optional. The currency code.
                        "estimatedTotal": 0.0,  # Optional. The estimated total.
                        "events": [
                            {
                                "amountBilled": 0.0,  # Optional. The amount billed.
                                "amountConsumed": 0.0,  # Optional. The amount
                                  consumed.
                                "dimensionId": "str",  # Optional. The dimension id.
                                "dimensionName": "str",  # Optional. The dimension
                                  name.
                                "measureUnit": "str",  # Optional. The unit of
                                  measure.
                                "unitPrice": 0.0  # Optional. The unit price.
                            }
                        ]
                    },
                    "creationTime": "2020-02-20 00:00:00",  # Optional. The creation time of the
                      item.
                    "endExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item finished execution.
                    "errorData": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str"  # A message describing the error, intended to be
                          suitable for displaying in a user interface. Required.
                    },
                    "inputDataUri": "str",  # Optional. The input blob SAS uri, if specified, it
                      will override the default input blob in the container.
                    "inputParams": {},  # Optional. The input parameters for the job. JSON object
                      used by the target solver. It is expected that the size of this object is small
                      and only used to specify parameters for the execution target, not the input data.
                    "jobType": "str",  # Optional. The type of job. Known values are: "Unknown",
                      "QuantumComputing", "QuantumComputingBatch", and "Optimization".
                    "metadata": {
                        "str": "str"  # Optional. The job metadata. Metadata provides client
                          the ability to store client-specific information.
                    },
                    "outputDataFormat": "str",  # Optional. The format of the output data.
                    "outputDataUri": "str",  # Optional. The output blob SAS uri. When a job
                      finishes successfully, results will be uploaded to this blob.
                    "quantumComputingData": {
                        "count": 0  # Optional. The number of quantum computing items in the
                          job.
                    },
                    "sessionId": "str",  # Optional. The ID of the session that the job is part
                      of.
                    "status": "str",  # Optional. The status of the job. Known values are:
                      "Waiting", "Executing", "Succeeded", "Failed", and "Cancelled".
                    "tags": [
                        "str"  # Optional. List of user-supplied tags associated with the
                          job.
                    ]
                }
                # The response is polymorphic. The following are possible polymorphic responses based
                  off discriminator "itemType":

                # JSON input template for discriminator value "Job":
                item_details = {
                    "containerUri": "str",  # The blob container SAS uri, the container is used
                      to host job data. Required.
                    "id": "str",  # The id of the item. Required.
                    "inputDataFormat": "str",  # The format of the input data. Required.
                    "itemType": "Job",
                    "name": "str",  # The name of the item. It is not required for the name to be
                      unique and it's only used for display purposes. Required.
                    "providerId": "str",  # The unique identifier for the provider. Required.
                    "target": "str",  # The target identifier to run the job. Required.
                    "beginExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item began execution.
                    "cancellationTime": "2020-02-20 00:00:00",  # Optional. The time when a job
                      was successfully cancelled.
                    "costEstimate": {
                        "currencyCode": "str",  # Optional. The currency code.
                        "estimatedTotal": 0.0,  # Optional. The estimated total.
                        "events": [
                            {
                                "amountBilled": 0.0,  # Optional. The amount billed.
                                "amountConsumed": 0.0,  # Optional. The amount
                                  consumed.
                                "dimensionId": "str",  # Optional. The dimension id.
                                "dimensionName": "str",  # Optional. The dimension
                                  name.
                                "measureUnit": "str",  # Optional. The unit of
                                  measure.
                                "unitPrice": 0.0  # Optional. The unit price.
                            }
                        ]
                    },
                    "creationTime": "2020-02-20 00:00:00",  # Optional. The creation time of the
                      item.
                    "endExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item finished execution.
                    "errorData": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str"  # A message describing the error, intended to be
                          suitable for displaying in a user interface. Required.
                    },
                    "inputDataUri": "str",  # Optional. The input blob SAS uri, if specified, it
                      will override the default input blob in the container.
                    "inputParams": {},  # Optional. The input parameters for the job. JSON object
                      used by the target solver. It is expected that the size of this object is small
                      and only used to specify parameters for the execution target, not the input data.
                    "jobType": "str",  # Optional. The type of job. Known values are: "Unknown",
                      "QuantumComputing", "QuantumComputingBatch", and "Optimization".
                    "metadata": {
                        "str": "str"  # Optional. The job metadata. Metadata provides client
                          the ability to store client-specific information.
                    },
                    "outputDataFormat": "str",  # Optional. The format of the output data.
                    "outputDataUri": "str",  # Optional. The output blob SAS uri. When a job
                      finishes successfully, results will be uploaded to this blob.
                    "quantumComputingData": {
                        "count": 0  # Optional. The number of quantum computing items in the
                          job.
                    },
                    "sessionId": "str",  # Optional. The ID of the session that the job is part
                      of.
                    "status": "str",  # Optional. The status of the job. Known values are:
                      "Waiting", "Executing", "Succeeded", "Failed", and "Cancelled".
                    "tags": [
                        "str"  # Optional. List of user-supplied tags associated with the
                          job.
                    ]
                }

                # response body for status code(s): 200, 201
                response == {
                    "containerUri": "str",  # The blob container SAS uri, the container is used
                      to host job data. Required.
                    "id": "str",  # The id of the item. Required.
                    "inputDataFormat": "str",  # The format of the input data. Required.
                    "itemType": "Job",
                    "name": "str",  # The name of the item. It is not required for the name to be
                      unique and it's only used for display purposes. Required.
                    "providerId": "str",  # The unique identifier for the provider. Required.
                    "target": "str",  # The target identifier to run the job. Required.
                    "beginExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item began execution.
                    "cancellationTime": "2020-02-20 00:00:00",  # Optional. The time when a job
                      was successfully cancelled.
                    "costEstimate": {
                        "currencyCode": "str",  # Optional. The currency code.
                        "estimatedTotal": 0.0,  # Optional. The estimated total.
                        "events": [
                            {
                                "amountBilled": 0.0,  # Optional. The amount billed.
                                "amountConsumed": 0.0,  # Optional. The amount
                                  consumed.
                                "dimensionId": "str",  # Optional. The dimension id.
                                "dimensionName": "str",  # Optional. The dimension
                                  name.
                                "measureUnit": "str",  # Optional. The unit of
                                  measure.
                                "unitPrice": 0.0  # Optional. The unit price.
                            }
                        ]
                    },
                    "creationTime": "2020-02-20 00:00:00",  # Optional. The creation time of the
                      item.
                    "endExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item finished execution.
                    "errorData": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str"  # A message describing the error, intended to be
                          suitable for displaying in a user interface. Required.
                    },
                    "inputDataUri": "str",  # Optional. The input blob SAS uri, if specified, it
                      will override the default input blob in the container.
                    "inputParams": {},  # Optional. The input parameters for the job. JSON object
                      used by the target solver. It is expected that the size of this object is small
                      and only used to specify parameters for the execution target, not the input data.
                    "jobType": "str",  # Optional. The type of job. Known values are: "Unknown",
                      "QuantumComputing", "QuantumComputingBatch", and "Optimization".
                    "metadata": {
                        "str": "str"  # Optional. The job metadata. Metadata provides client
                          the ability to store client-specific information.
                    },
                    "outputDataFormat": "str",  # Optional. The format of the output data.
                    "outputDataUri": "str",  # Optional. The output blob SAS uri. When a job
                      finishes successfully, results will be uploaded to this blob.
                    "quantumComputingData": {
                        "count": 0  # Optional. The number of quantum computing items in the
                          job.
                    },
                    "sessionId": "str",  # Optional. The ID of the session that the job is part
                      of.
                    "status": "str",  # Optional. The status of the job. Known values are:
                      "Waiting", "Executing", "Succeeded", "Failed", and "Cancelled".
                    "tags": [
                        "str"  # Optional. List of user-supplied tags associated with the
                          job.
                    ]
                }
        """

    @distributed_trace
    def create(self, job_id: str, job: Union[JSON, IO], **kwargs: Any) -> JSON:
        """Create a job.

        :param job_id: Id of the job. Required.
        :type job_id: str
        :param job: The complete metadata of the job to submit. Is either a JSON type or a IO type.
         Required.
        :type job: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # The input is polymorphic. The following are possible polymorphic inputs based off
                  discriminator "itemType":

                # JSON input template for discriminator value "Job":
                item_details = {
                    "containerUri": "str",  # The blob container SAS uri, the container is used
                      to host job data. Required.
                    "id": "str",  # The id of the item. Required.
                    "inputDataFormat": "str",  # The format of the input data. Required.
                    "itemType": "Job",
                    "name": "str",  # The name of the item. It is not required for the name to be
                      unique and it's only used for display purposes. Required.
                    "providerId": "str",  # The unique identifier for the provider. Required.
                    "target": "str",  # The target identifier to run the job. Required.
                    "beginExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item began execution.
                    "cancellationTime": "2020-02-20 00:00:00",  # Optional. The time when a job
                      was successfully cancelled.
                    "costEstimate": {
                        "currencyCode": "str",  # Optional. The currency code.
                        "estimatedTotal": 0.0,  # Optional. The estimated total.
                        "events": [
                            {
                                "amountBilled": 0.0,  # Optional. The amount billed.
                                "amountConsumed": 0.0,  # Optional. The amount
                                  consumed.
                                "dimensionId": "str",  # Optional. The dimension id.
                                "dimensionName": "str",  # Optional. The dimension
                                  name.
                                "measureUnit": "str",  # Optional. The unit of
                                  measure.
                                "unitPrice": 0.0  # Optional. The unit price.
                            }
                        ]
                    },
                    "creationTime": "2020-02-20 00:00:00",  # Optional. The creation time of the
                      item.
                    "endExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item finished execution.
                    "errorData": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str"  # A message describing the error, intended to be
                          suitable for displaying in a user interface. Required.
                    },
                    "inputDataUri": "str",  # Optional. The input blob SAS uri, if specified, it
                      will override the default input blob in the container.
                    "inputParams": {},  # Optional. The input parameters for the job. JSON object
                      used by the target solver. It is expected that the size of this object is small
                      and only used to specify parameters for the execution target, not the input data.
                    "jobType": "str",  # Optional. The type of job. Known values are: "Unknown",
                      "QuantumComputing", "QuantumComputingBatch", and "Optimization".
                    "metadata": {
                        "str": "str"  # Optional. The job metadata. Metadata provides client
                          the ability to store client-specific information.
                    },
                    "outputDataFormat": "str",  # Optional. The format of the output data.
                    "outputDataUri": "str",  # Optional. The output blob SAS uri. When a job
                      finishes successfully, results will be uploaded to this blob.
                    "quantumComputingData": {
                        "count": 0  # Optional. The number of quantum computing items in the
                          job.
                    },
                    "sessionId": "str",  # Optional. The ID of the session that the job is part
                      of.
                    "status": "str",  # Optional. The status of the job. Known values are:
                      "Waiting", "Executing", "Succeeded", "Failed", and "Cancelled".
                    "tags": [
                        "str"  # Optional. List of user-supplied tags associated with the
                          job.
                    ]
                }

                # JSON input template you can fill out and use as your body input.
                job = {
                    "containerUri": "str",  # The blob container SAS uri, the container is used
                      to host job data. Required.
                    "id": "str",  # The id of the item. Required.
                    "inputDataFormat": "str",  # The format of the input data. Required.
                    "itemType": "Job",
                    "name": "str",  # The name of the item. It is not required for the name to be
                      unique and it's only used for display purposes. Required.
                    "providerId": "str",  # The unique identifier for the provider. Required.
                    "target": "str",  # The target identifier to run the job. Required.
                    "beginExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item began execution.
                    "cancellationTime": "2020-02-20 00:00:00",  # Optional. The time when a job
                      was successfully cancelled.
                    "costEstimate": {
                        "currencyCode": "str",  # Optional. The currency code.
                        "estimatedTotal": 0.0,  # Optional. The estimated total.
                        "events": [
                            {
                                "amountBilled": 0.0,  # Optional. The amount billed.
                                "amountConsumed": 0.0,  # Optional. The amount
                                  consumed.
                                "dimensionId": "str",  # Optional. The dimension id.
                                "dimensionName": "str",  # Optional. The dimension
                                  name.
                                "measureUnit": "str",  # Optional. The unit of
                                  measure.
                                "unitPrice": 0.0  # Optional. The unit price.
                            }
                        ]
                    },
                    "creationTime": "2020-02-20 00:00:00",  # Optional. The creation time of the
                      item.
                    "endExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item finished execution.
                    "errorData": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str"  # A message describing the error, intended to be
                          suitable for displaying in a user interface. Required.
                    },
                    "inputDataUri": "str",  # Optional. The input blob SAS uri, if specified, it
                      will override the default input blob in the container.
                    "inputParams": {},  # Optional. The input parameters for the job. JSON object
                      used by the target solver. It is expected that the size of this object is small
                      and only used to specify parameters for the execution target, not the input data.
                    "jobType": "str",  # Optional. The type of job. Known values are: "Unknown",
                      "QuantumComputing", "QuantumComputingBatch", and "Optimization".
                    "metadata": {
                        "str": "str"  # Optional. The job metadata. Metadata provides client
                          the ability to store client-specific information.
                    },
                    "outputDataFormat": "str",  # Optional. The format of the output data.
                    "outputDataUri": "str",  # Optional. The output blob SAS uri. When a job
                      finishes successfully, results will be uploaded to this blob.
                    "quantumComputingData": {
                        "count": 0  # Optional. The number of quantum computing items in the
                          job.
                    },
                    "sessionId": "str",  # Optional. The ID of the session that the job is part
                      of.
                    "status": "str",  # Optional. The status of the job. Known values are:
                      "Waiting", "Executing", "Succeeded", "Failed", and "Cancelled".
                    "tags": [
                        "str"  # Optional. List of user-supplied tags associated with the
                          job.
                    ]
                }
                # The response is polymorphic. The following are possible polymorphic responses based
                  off discriminator "itemType":

                # JSON input template for discriminator value "Job":
                item_details = {
                    "containerUri": "str",  # The blob container SAS uri, the container is used
                      to host job data. Required.
                    "id": "str",  # The id of the item. Required.
                    "inputDataFormat": "str",  # The format of the input data. Required.
                    "itemType": "Job",
                    "name": "str",  # The name of the item. It is not required for the name to be
                      unique and it's only used for display purposes. Required.
                    "providerId": "str",  # The unique identifier for the provider. Required.
                    "target": "str",  # The target identifier to run the job. Required.
                    "beginExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item began execution.
                    "cancellationTime": "2020-02-20 00:00:00",  # Optional. The time when a job
                      was successfully cancelled.
                    "costEstimate": {
                        "currencyCode": "str",  # Optional. The currency code.
                        "estimatedTotal": 0.0,  # Optional. The estimated total.
                        "events": [
                            {
                                "amountBilled": 0.0,  # Optional. The amount billed.
                                "amountConsumed": 0.0,  # Optional. The amount
                                  consumed.
                                "dimensionId": "str",  # Optional. The dimension id.
                                "dimensionName": "str",  # Optional. The dimension
                                  name.
                                "measureUnit": "str",  # Optional. The unit of
                                  measure.
                                "unitPrice": 0.0  # Optional. The unit price.
                            }
                        ]
                    },
                    "creationTime": "2020-02-20 00:00:00",  # Optional. The creation time of the
                      item.
                    "endExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item finished execution.
                    "errorData": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str"  # A message describing the error, intended to be
                          suitable for displaying in a user interface. Required.
                    },
                    "inputDataUri": "str",  # Optional. The input blob SAS uri, if specified, it
                      will override the default input blob in the container.
                    "inputParams": {},  # Optional. The input parameters for the job. JSON object
                      used by the target solver. It is expected that the size of this object is small
                      and only used to specify parameters for the execution target, not the input data.
                    "jobType": "str",  # Optional. The type of job. Known values are: "Unknown",
                      "QuantumComputing", "QuantumComputingBatch", and "Optimization".
                    "metadata": {
                        "str": "str"  # Optional. The job metadata. Metadata provides client
                          the ability to store client-specific information.
                    },
                    "outputDataFormat": "str",  # Optional. The format of the output data.
                    "outputDataUri": "str",  # Optional. The output blob SAS uri. When a job
                      finishes successfully, results will be uploaded to this blob.
                    "quantumComputingData": {
                        "count": 0  # Optional. The number of quantum computing items in the
                          job.
                    },
                    "sessionId": "str",  # Optional. The ID of the session that the job is part
                      of.
                    "status": "str",  # Optional. The status of the job. Known values are:
                      "Waiting", "Executing", "Succeeded", "Failed", and "Cancelled".
                    "tags": [
                        "str"  # Optional. List of user-supplied tags associated with the
                          job.
                    ]
                }
                # The response is polymorphic. The following are possible polymorphic responses based
                  off discriminator "itemType":

                # JSON input template for discriminator value "Job":
                item_details = {
                    "containerUri": "str",  # The blob container SAS uri, the container is used
                      to host job data. Required.
                    "id": "str",  # The id of the item. Required.
                    "inputDataFormat": "str",  # The format of the input data. Required.
                    "itemType": "Job",
                    "name": "str",  # The name of the item. It is not required for the name to be
                      unique and it's only used for display purposes. Required.
                    "providerId": "str",  # The unique identifier for the provider. Required.
                    "target": "str",  # The target identifier to run the job. Required.
                    "beginExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item began execution.
                    "cancellationTime": "2020-02-20 00:00:00",  # Optional. The time when a job
                      was successfully cancelled.
                    "costEstimate": {
                        "currencyCode": "str",  # Optional. The currency code.
                        "estimatedTotal": 0.0,  # Optional. The estimated total.
                        "events": [
                            {
                                "amountBilled": 0.0,  # Optional. The amount billed.
                                "amountConsumed": 0.0,  # Optional. The amount
                                  consumed.
                                "dimensionId": "str",  # Optional. The dimension id.
                                "dimensionName": "str",  # Optional. The dimension
                                  name.
                                "measureUnit": "str",  # Optional. The unit of
                                  measure.
                                "unitPrice": 0.0  # Optional. The unit price.
                            }
                        ]
                    },
                    "creationTime": "2020-02-20 00:00:00",  # Optional. The creation time of the
                      item.
                    "endExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item finished execution.
                    "errorData": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str"  # A message describing the error, intended to be
                          suitable for displaying in a user interface. Required.
                    },
                    "inputDataUri": "str",  # Optional. The input blob SAS uri, if specified, it
                      will override the default input blob in the container.
                    "inputParams": {},  # Optional. The input parameters for the job. JSON object
                      used by the target solver. It is expected that the size of this object is small
                      and only used to specify parameters for the execution target, not the input data.
                    "jobType": "str",  # Optional. The type of job. Known values are: "Unknown",
                      "QuantumComputing", "QuantumComputingBatch", and "Optimization".
                    "metadata": {
                        "str": "str"  # Optional. The job metadata. Metadata provides client
                          the ability to store client-specific information.
                    },
                    "outputDataFormat": "str",  # Optional. The format of the output data.
                    "outputDataUri": "str",  # Optional. The output blob SAS uri. When a job
                      finishes successfully, results will be uploaded to this blob.
                    "quantumComputingData": {
                        "count": 0  # Optional. The number of quantum computing items in the
                          job.
                    },
                    "sessionId": "str",  # Optional. The ID of the session that the job is part
                      of.
                    "status": "str",  # Optional. The status of the job. Known values are:
                      "Waiting", "Executing", "Succeeded", "Failed", and "Cancelled".
                    "tags": [
                        "str"  # Optional. List of user-supplied tags associated with the
                          job.
                    ]
                }

                # response body for status code(s): 200, 201
                response == {
                    "containerUri": "str",  # The blob container SAS uri, the container is used
                      to host job data. Required.
                    "id": "str",  # The id of the item. Required.
                    "inputDataFormat": "str",  # The format of the input data. Required.
                    "itemType": "Job",
                    "name": "str",  # The name of the item. It is not required for the name to be
                      unique and it's only used for display purposes. Required.
                    "providerId": "str",  # The unique identifier for the provider. Required.
                    "target": "str",  # The target identifier to run the job. Required.
                    "beginExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item began execution.
                    "cancellationTime": "2020-02-20 00:00:00",  # Optional. The time when a job
                      was successfully cancelled.
                    "costEstimate": {
                        "currencyCode": "str",  # Optional. The currency code.
                        "estimatedTotal": 0.0,  # Optional. The estimated total.
                        "events": [
                            {
                                "amountBilled": 0.0,  # Optional. The amount billed.
                                "amountConsumed": 0.0,  # Optional. The amount
                                  consumed.
                                "dimensionId": "str",  # Optional. The dimension id.
                                "dimensionName": "str",  # Optional. The dimension
                                  name.
                                "measureUnit": "str",  # Optional. The unit of
                                  measure.
                                "unitPrice": 0.0  # Optional. The unit price.
                            }
                        ]
                    },
                    "creationTime": "2020-02-20 00:00:00",  # Optional. The creation time of the
                      item.
                    "endExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item finished execution.
                    "errorData": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str"  # A message describing the error, intended to be
                          suitable for displaying in a user interface. Required.
                    },
                    "inputDataUri": "str",  # Optional. The input blob SAS uri, if specified, it
                      will override the default input blob in the container.
                    "inputParams": {},  # Optional. The input parameters for the job. JSON object
                      used by the target solver. It is expected that the size of this object is small
                      and only used to specify parameters for the execution target, not the input data.
                    "jobType": "str",  # Optional. The type of job. Known values are: "Unknown",
                      "QuantumComputing", "QuantumComputingBatch", and "Optimization".
                    "metadata": {
                        "str": "str"  # Optional. The job metadata. Metadata provides client
                          the ability to store client-specific information.
                    },
                    "outputDataFormat": "str",  # Optional. The format of the output data.
                    "outputDataUri": "str",  # Optional. The output blob SAS uri. When a job
                      finishes successfully, results will be uploaded to this blob.
                    "quantumComputingData": {
                        "count": 0  # Optional. The number of quantum computing items in the
                          job.
                    },
                    "sessionId": "str",  # Optional. The ID of the session that the job is part
                      of.
                    "status": "str",  # Optional. The status of the job. Known values are:
                      "Waiting", "Executing", "Succeeded", "Failed", and "Cancelled".
                    "tags": [
                        "str"  # Optional. List of user-supplied tags associated with the
                          job.
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(job, (IO, bytes)):
            _content = job
        else:
            _json = job

        request = build_jobs_create_request(
            job_id=job_id,
            subscription_id=self._config.subscription_id,
            resource_group_name=self._config.resource_group_name,
            workspace_name=self._config.workspace_name,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 201:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def cancel(self, job_id: str, **kwargs: Any) -> None:  # pylint: disable=inconsistent-return-statements
        """Cancel a job.

        :param job_id: Id of the job. Required.
        :type job_id: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        request = build_jobs_cancel_request(
            job_id=job_id,
            subscription_id=self._config.subscription_id,
            resource_group_name=self._config.resource_group_name,
            workspace_name=self._config.workspace_name,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @overload
    def patch(
        self, job_id: str, patch_job: List[JSON], *, content_type: str = "application/json", **kwargs: Any
    ) -> Optional[JSON]:
        """Patch a job.

        :param job_id: Id of the job. Required.
        :type job_id: str
        :param patch_job: The json patch document containing the patch operations. Required.
        :type patch_job: list[JSON]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object or None
        :rtype: JSON or None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                patch_job = [
                    {
                        "op": "str",  # The operation to be performed. Required. Known values
                          are: "add", "remove", "replace", "move", "copy", and "test".
                        "path": "str",  # A JSON-Pointer. Required.
                        "from": "str",  # Optional. Optional field used in copy and move
                          operations.
                        "value": {}  # Optional. A value to be used in the operation on the
                          path.
                    }
                ]
                # The response is polymorphic. The following are possible polymorphic responses based
                  off discriminator "itemType":

                # JSON input template for discriminator value "Job":
                item_details = {
                    "containerUri": "str",  # The blob container SAS uri, the container is used
                      to host job data. Required.
                    "id": "str",  # The id of the item. Required.
                    "inputDataFormat": "str",  # The format of the input data. Required.
                    "itemType": "Job",
                    "name": "str",  # The name of the item. It is not required for the name to be
                      unique and it's only used for display purposes. Required.
                    "providerId": "str",  # The unique identifier for the provider. Required.
                    "target": "str",  # The target identifier to run the job. Required.
                    "beginExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item began execution.
                    "cancellationTime": "2020-02-20 00:00:00",  # Optional. The time when a job
                      was successfully cancelled.
                    "costEstimate": {
                        "currencyCode": "str",  # Optional. The currency code.
                        "estimatedTotal": 0.0,  # Optional. The estimated total.
                        "events": [
                            {
                                "amountBilled": 0.0,  # Optional. The amount billed.
                                "amountConsumed": 0.0,  # Optional. The amount
                                  consumed.
                                "dimensionId": "str",  # Optional. The dimension id.
                                "dimensionName": "str",  # Optional. The dimension
                                  name.
                                "measureUnit": "str",  # Optional. The unit of
                                  measure.
                                "unitPrice": 0.0  # Optional. The unit price.
                            }
                        ]
                    },
                    "creationTime": "2020-02-20 00:00:00",  # Optional. The creation time of the
                      item.
                    "endExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item finished execution.
                    "errorData": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str"  # A message describing the error, intended to be
                          suitable for displaying in a user interface. Required.
                    },
                    "inputDataUri": "str",  # Optional. The input blob SAS uri, if specified, it
                      will override the default input blob in the container.
                    "inputParams": {},  # Optional. The input parameters for the job. JSON object
                      used by the target solver. It is expected that the size of this object is small
                      and only used to specify parameters for the execution target, not the input data.
                    "jobType": "str",  # Optional. The type of job. Known values are: "Unknown",
                      "QuantumComputing", "QuantumComputingBatch", and "Optimization".
                    "metadata": {
                        "str": "str"  # Optional. The job metadata. Metadata provides client
                          the ability to store client-specific information.
                    },
                    "outputDataFormat": "str",  # Optional. The format of the output data.
                    "outputDataUri": "str",  # Optional. The output blob SAS uri. When a job
                      finishes successfully, results will be uploaded to this blob.
                    "quantumComputingData": {
                        "count": 0  # Optional. The number of quantum computing items in the
                          job.
                    },
                    "sessionId": "str",  # Optional. The ID of the session that the job is part
                      of.
                    "status": "str",  # Optional. The status of the job. Known values are:
                      "Waiting", "Executing", "Succeeded", "Failed", and "Cancelled".
                    "tags": [
                        "str"  # Optional. List of user-supplied tags associated with the
                          job.
                    ]
                }

                # response body for status code(s): 200
                response == {
                    "containerUri": "str",  # The blob container SAS uri, the container is used
                      to host job data. Required.
                    "id": "str",  # The id of the item. Required.
                    "inputDataFormat": "str",  # The format of the input data. Required.
                    "itemType": "Job",
                    "name": "str",  # The name of the item. It is not required for the name to be
                      unique and it's only used for display purposes. Required.
                    "providerId": "str",  # The unique identifier for the provider. Required.
                    "target": "str",  # The target identifier to run the job. Required.
                    "beginExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item began execution.
                    "cancellationTime": "2020-02-20 00:00:00",  # Optional. The time when a job
                      was successfully cancelled.
                    "costEstimate": {
                        "currencyCode": "str",  # Optional. The currency code.
                        "estimatedTotal": 0.0,  # Optional. The estimated total.
                        "events": [
                            {
                                "amountBilled": 0.0,  # Optional. The amount billed.
                                "amountConsumed": 0.0,  # Optional. The amount
                                  consumed.
                                "dimensionId": "str",  # Optional. The dimension id.
                                "dimensionName": "str",  # Optional. The dimension
                                  name.
                                "measureUnit": "str",  # Optional. The unit of
                                  measure.
                                "unitPrice": 0.0  # Optional. The unit price.
                            }
                        ]
                    },
                    "creationTime": "2020-02-20 00:00:00",  # Optional. The creation time of the
                      item.
                    "endExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item finished execution.
                    "errorData": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str"  # A message describing the error, intended to be
                          suitable for displaying in a user interface. Required.
                    },
                    "inputDataUri": "str",  # Optional. The input blob SAS uri, if specified, it
                      will override the default input blob in the container.
                    "inputParams": {},  # Optional. The input parameters for the job. JSON object
                      used by the target solver. It is expected that the size of this object is small
                      and only used to specify parameters for the execution target, not the input data.
                    "jobType": "str",  # Optional. The type of job. Known values are: "Unknown",
                      "QuantumComputing", "QuantumComputingBatch", and "Optimization".
                    "metadata": {
                        "str": "str"  # Optional. The job metadata. Metadata provides client
                          the ability to store client-specific information.
                    },
                    "outputDataFormat": "str",  # Optional. The format of the output data.
                    "outputDataUri": "str",  # Optional. The output blob SAS uri. When a job
                      finishes successfully, results will be uploaded to this blob.
                    "quantumComputingData": {
                        "count": 0  # Optional. The number of quantum computing items in the
                          job.
                    },
                    "sessionId": "str",  # Optional. The ID of the session that the job is part
                      of.
                    "status": "str",  # Optional. The status of the job. Known values are:
                      "Waiting", "Executing", "Succeeded", "Failed", and "Cancelled".
                    "tags": [
                        "str"  # Optional. List of user-supplied tags associated with the
                          job.
                    ]
                }
        """

    @overload
    def patch(
        self, job_id: str, patch_job: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> Optional[JSON]:
        """Patch a job.

        :param job_id: Id of the job. Required.
        :type job_id: str
        :param patch_job: The json patch document containing the patch operations. Required.
        :type patch_job: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object or None
        :rtype: JSON or None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python
                # The response is polymorphic. The following are possible polymorphic responses based
                  off discriminator "itemType":

                # JSON input template for discriminator value "Job":
                item_details = {
                    "containerUri": "str",  # The blob container SAS uri, the container is used
                      to host job data. Required.
                    "id": "str",  # The id of the item. Required.
                    "inputDataFormat": "str",  # The format of the input data. Required.
                    "itemType": "Job",
                    "name": "str",  # The name of the item. It is not required for the name to be
                      unique and it's only used for display purposes. Required.
                    "providerId": "str",  # The unique identifier for the provider. Required.
                    "target": "str",  # The target identifier to run the job. Required.
                    "beginExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item began execution.
                    "cancellationTime": "2020-02-20 00:00:00",  # Optional. The time when a job
                      was successfully cancelled.
                    "costEstimate": {
                        "currencyCode": "str",  # Optional. The currency code.
                        "estimatedTotal": 0.0,  # Optional. The estimated total.
                        "events": [
                            {
                                "amountBilled": 0.0,  # Optional. The amount billed.
                                "amountConsumed": 0.0,  # Optional. The amount
                                  consumed.
                                "dimensionId": "str",  # Optional. The dimension id.
                                "dimensionName": "str",  # Optional. The dimension
                                  name.
                                "measureUnit": "str",  # Optional. The unit of
                                  measure.
                                "unitPrice": 0.0  # Optional. The unit price.
                            }
                        ]
                    },
                    "creationTime": "2020-02-20 00:00:00",  # Optional. The creation time of the
                      item.
                    "endExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item finished execution.
                    "errorData": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str"  # A message describing the error, intended to be
                          suitable for displaying in a user interface. Required.
                    },
                    "inputDataUri": "str",  # Optional. The input blob SAS uri, if specified, it
                      will override the default input blob in the container.
                    "inputParams": {},  # Optional. The input parameters for the job. JSON object
                      used by the target solver. It is expected that the size of this object is small
                      and only used to specify parameters for the execution target, not the input data.
                    "jobType": "str",  # Optional. The type of job. Known values are: "Unknown",
                      "QuantumComputing", "QuantumComputingBatch", and "Optimization".
                    "metadata": {
                        "str": "str"  # Optional. The job metadata. Metadata provides client
                          the ability to store client-specific information.
                    },
                    "outputDataFormat": "str",  # Optional. The format of the output data.
                    "outputDataUri": "str",  # Optional. The output blob SAS uri. When a job
                      finishes successfully, results will be uploaded to this blob.
                    "quantumComputingData": {
                        "count": 0  # Optional. The number of quantum computing items in the
                          job.
                    },
                    "sessionId": "str",  # Optional. The ID of the session that the job is part
                      of.
                    "status": "str",  # Optional. The status of the job. Known values are:
                      "Waiting", "Executing", "Succeeded", "Failed", and "Cancelled".
                    "tags": [
                        "str"  # Optional. List of user-supplied tags associated with the
                          job.
                    ]
                }

                # response body for status code(s): 200
                response == {
                    "containerUri": "str",  # The blob container SAS uri, the container is used
                      to host job data. Required.
                    "id": "str",  # The id of the item. Required.
                    "inputDataFormat": "str",  # The format of the input data. Required.
                    "itemType": "Job",
                    "name": "str",  # The name of the item. It is not required for the name to be
                      unique and it's only used for display purposes. Required.
                    "providerId": "str",  # The unique identifier for the provider. Required.
                    "target": "str",  # The target identifier to run the job. Required.
                    "beginExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item began execution.
                    "cancellationTime": "2020-02-20 00:00:00",  # Optional. The time when a job
                      was successfully cancelled.
                    "costEstimate": {
                        "currencyCode": "str",  # Optional. The currency code.
                        "estimatedTotal": 0.0,  # Optional. The estimated total.
                        "events": [
                            {
                                "amountBilled": 0.0,  # Optional. The amount billed.
                                "amountConsumed": 0.0,  # Optional. The amount
                                  consumed.
                                "dimensionId": "str",  # Optional. The dimension id.
                                "dimensionName": "str",  # Optional. The dimension
                                  name.
                                "measureUnit": "str",  # Optional. The unit of
                                  measure.
                                "unitPrice": 0.0  # Optional. The unit price.
                            }
                        ]
                    },
                    "creationTime": "2020-02-20 00:00:00",  # Optional. The creation time of the
                      item.
                    "endExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item finished execution.
                    "errorData": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str"  # A message describing the error, intended to be
                          suitable for displaying in a user interface. Required.
                    },
                    "inputDataUri": "str",  # Optional. The input blob SAS uri, if specified, it
                      will override the default input blob in the container.
                    "inputParams": {},  # Optional. The input parameters for the job. JSON object
                      used by the target solver. It is expected that the size of this object is small
                      and only used to specify parameters for the execution target, not the input data.
                    "jobType": "str",  # Optional. The type of job. Known values are: "Unknown",
                      "QuantumComputing", "QuantumComputingBatch", and "Optimization".
                    "metadata": {
                        "str": "str"  # Optional. The job metadata. Metadata provides client
                          the ability to store client-specific information.
                    },
                    "outputDataFormat": "str",  # Optional. The format of the output data.
                    "outputDataUri": "str",  # Optional. The output blob SAS uri. When a job
                      finishes successfully, results will be uploaded to this blob.
                    "quantumComputingData": {
                        "count": 0  # Optional. The number of quantum computing items in the
                          job.
                    },
                    "sessionId": "str",  # Optional. The ID of the session that the job is part
                      of.
                    "status": "str",  # Optional. The status of the job. Known values are:
                      "Waiting", "Executing", "Succeeded", "Failed", and "Cancelled".
                    "tags": [
                        "str"  # Optional. List of user-supplied tags associated with the
                          job.
                    ]
                }
        """

    @distributed_trace
    def patch(self, job_id: str, patch_job: Union[List[JSON], IO], **kwargs: Any) -> Optional[JSON]:
        """Patch a job.

        :param job_id: Id of the job. Required.
        :type job_id: str
        :param patch_job: The json patch document containing the patch operations. Is either a [JSON]
         type or a IO type. Required.
        :type patch_job: list[JSON] or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object or None
        :rtype: JSON or None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python
                # The response is polymorphic. The following are possible polymorphic responses based
                  off discriminator "itemType":

                # JSON input template for discriminator value "Job":
                item_details = {
                    "containerUri": "str",  # The blob container SAS uri, the container is used
                      to host job data. Required.
                    "id": "str",  # The id of the item. Required.
                    "inputDataFormat": "str",  # The format of the input data. Required.
                    "itemType": "Job",
                    "name": "str",  # The name of the item. It is not required for the name to be
                      unique and it's only used for display purposes. Required.
                    "providerId": "str",  # The unique identifier for the provider. Required.
                    "target": "str",  # The target identifier to run the job. Required.
                    "beginExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item began execution.
                    "cancellationTime": "2020-02-20 00:00:00",  # Optional. The time when a job
                      was successfully cancelled.
                    "costEstimate": {
                        "currencyCode": "str",  # Optional. The currency code.
                        "estimatedTotal": 0.0,  # Optional. The estimated total.
                        "events": [
                            {
                                "amountBilled": 0.0,  # Optional. The amount billed.
                                "amountConsumed": 0.0,  # Optional. The amount
                                  consumed.
                                "dimensionId": "str",  # Optional. The dimension id.
                                "dimensionName": "str",  # Optional. The dimension
                                  name.
                                "measureUnit": "str",  # Optional. The unit of
                                  measure.
                                "unitPrice": 0.0  # Optional. The unit price.
                            }
                        ]
                    },
                    "creationTime": "2020-02-20 00:00:00",  # Optional. The creation time of the
                      item.
                    "endExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item finished execution.
                    "errorData": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str"  # A message describing the error, intended to be
                          suitable for displaying in a user interface. Required.
                    },
                    "inputDataUri": "str",  # Optional. The input blob SAS uri, if specified, it
                      will override the default input blob in the container.
                    "inputParams": {},  # Optional. The input parameters for the job. JSON object
                      used by the target solver. It is expected that the size of this object is small
                      and only used to specify parameters for the execution target, not the input data.
                    "jobType": "str",  # Optional. The type of job. Known values are: "Unknown",
                      "QuantumComputing", "QuantumComputingBatch", and "Optimization".
                    "metadata": {
                        "str": "str"  # Optional. The job metadata. Metadata provides client
                          the ability to store client-specific information.
                    },
                    "outputDataFormat": "str",  # Optional. The format of the output data.
                    "outputDataUri": "str",  # Optional. The output blob SAS uri. When a job
                      finishes successfully, results will be uploaded to this blob.
                    "quantumComputingData": {
                        "count": 0  # Optional. The number of quantum computing items in the
                          job.
                    },
                    "sessionId": "str",  # Optional. The ID of the session that the job is part
                      of.
                    "status": "str",  # Optional. The status of the job. Known values are:
                      "Waiting", "Executing", "Succeeded", "Failed", and "Cancelled".
                    "tags": [
                        "str"  # Optional. List of user-supplied tags associated with the
                          job.
                    ]
                }

                # response body for status code(s): 200
                response == {
                    "containerUri": "str",  # The blob container SAS uri, the container is used
                      to host job data. Required.
                    "id": "str",  # The id of the item. Required.
                    "inputDataFormat": "str",  # The format of the input data. Required.
                    "itemType": "Job",
                    "name": "str",  # The name of the item. It is not required for the name to be
                      unique and it's only used for display purposes. Required.
                    "providerId": "str",  # The unique identifier for the provider. Required.
                    "target": "str",  # The target identifier to run the job. Required.
                    "beginExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item began execution.
                    "cancellationTime": "2020-02-20 00:00:00",  # Optional. The time when a job
                      was successfully cancelled.
                    "costEstimate": {
                        "currencyCode": "str",  # Optional. The currency code.
                        "estimatedTotal": 0.0,  # Optional. The estimated total.
                        "events": [
                            {
                                "amountBilled": 0.0,  # Optional. The amount billed.
                                "amountConsumed": 0.0,  # Optional. The amount
                                  consumed.
                                "dimensionId": "str",  # Optional. The dimension id.
                                "dimensionName": "str",  # Optional. The dimension
                                  name.
                                "measureUnit": "str",  # Optional. The unit of
                                  measure.
                                "unitPrice": 0.0  # Optional. The unit price.
                            }
                        ]
                    },
                    "creationTime": "2020-02-20 00:00:00",  # Optional. The creation time of the
                      item.
                    "endExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item finished execution.
                    "errorData": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str"  # A message describing the error, intended to be
                          suitable for displaying in a user interface. Required.
                    },
                    "inputDataUri": "str",  # Optional. The input blob SAS uri, if specified, it
                      will override the default input blob in the container.
                    "inputParams": {},  # Optional. The input parameters for the job. JSON object
                      used by the target solver. It is expected that the size of this object is small
                      and only used to specify parameters for the execution target, not the input data.
                    "jobType": "str",  # Optional. The type of job. Known values are: "Unknown",
                      "QuantumComputing", "QuantumComputingBatch", and "Optimization".
                    "metadata": {
                        "str": "str"  # Optional. The job metadata. Metadata provides client
                          the ability to store client-specific information.
                    },
                    "outputDataFormat": "str",  # Optional. The format of the output data.
                    "outputDataUri": "str",  # Optional. The output blob SAS uri. When a job
                      finishes successfully, results will be uploaded to this blob.
                    "quantumComputingData": {
                        "count": 0  # Optional. The number of quantum computing items in the
                          job.
                    },
                    "sessionId": "str",  # Optional. The ID of the session that the job is part
                      of.
                    "status": "str",  # Optional. The status of the job. Known values are:
                      "Waiting", "Executing", "Succeeded", "Failed", and "Cancelled".
                    "tags": [
                        "str"  # Optional. List of user-supplied tags associated with the
                          job.
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[Optional[JSON]] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(patch_job, (IO, bytes)):
            _content = patch_job
        else:
            _json = patch_job

        request = build_jobs_patch_request(
            job_id=job_id,
            subscription_id=self._config.subscription_id,
            resource_group_name=self._config.resource_group_name,
            workspace_name=self._config.workspace_name,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized


class ProvidersOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.quantum._client.QuantumClient`'s
        :attr:`providers` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def get_status(self, **kwargs: Any) -> Iterable[JSON]:
        """Get provider status.

        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "currentAvailability": "str",  # Optional. Provider availability. Known
                      values are: "Available", "Degraded", and "Unavailable".
                    "id": "str",  # Optional. Provider id.
                    "targets": [
                        {
                            "averageQueueTime": 0,  # Optional. Average queue time in
                              seconds.
                            "currentAvailability": "str",  # Optional. Target
                              availability. Known values are: "Available", "Degraded", and
                              "Unavailable".
                            "id": "str",  # Optional. Target id.
                            "statusPage": "str"  # Optional. A page with detailed status
                              of the provider.
                        }
                    ]
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                request = build_providers_get_status_request(
                    subscription_id=self._config.subscription_id,
                    resource_group_name=self._config.resource_group_name,
                    workspace_name=self._config.workspace_name,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                request.url = self._client.format_url(request.url)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                request.url = self._client.format_url(request.url)

            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=False, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return ItemPaged(get_next, extract_data)


class StorageOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.quantum._client.QuantumClient`'s
        :attr:`storage` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @overload
    def sas_uri(self, blob_details: JSON, *, content_type: str = "application/json", **kwargs: Any) -> JSON:
        """Gets a URL with SAS token for a container/blob in the storage account associated with the
        workspace. The SAS URL can be used to upload job input and/or download job output.

        :param blob_details: The details (name and container) of the blob to store or download data.
         Required.
        :type blob_details: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                blob_details = {
                    "containerName": "str",  # The container name. Required.
                    "blobName": "str"  # Optional. The blob name.
                }

                # response body for status code(s): 200
                response == {
                    "sasUri": "str"  # Optional. A URL with a SAS token to upload a blob for
                      execution in the given workspace.
                }
        """

    @overload
    def sas_uri(self, blob_details: IO, *, content_type: str = "application/json", **kwargs: Any) -> JSON:
        """Gets a URL with SAS token for a container/blob in the storage account associated with the
        workspace. The SAS URL can be used to upload job input and/or download job output.

        :param blob_details: The details (name and container) of the blob to store or download data.
         Required.
        :type blob_details: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "sasUri": "str"  # Optional. A URL with a SAS token to upload a blob for
                      execution in the given workspace.
                }
        """

    @distributed_trace
    def sas_uri(self, blob_details: Union[JSON, IO], **kwargs: Any) -> JSON:
        """Gets a URL with SAS token for a container/blob in the storage account associated with the
        workspace. The SAS URL can be used to upload job input and/or download job output.

        :param blob_details: The details (name and container) of the blob to store or download data. Is
         either a JSON type or a IO type. Required.
        :type blob_details: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                blob_details = {
                    "containerName": "str",  # The container name. Required.
                    "blobName": "str"  # Optional. The blob name.
                }

                # response body for status code(s): 200
                response == {
                    "sasUri": "str"  # Optional. A URL with a SAS token to upload a blob for
                      execution in the given workspace.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(blob_details, (IO, bytes)):
            _content = blob_details
        else:
            _json = blob_details

        request = build_storage_sas_uri_request(
            subscription_id=self._config.subscription_id,
            resource_group_name=self._config.resource_group_name,
            workspace_name=self._config.workspace_name,
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)


class QuotasOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.quantum._client.QuantumClient`'s
        :attr:`quotas` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def list(self, **kwargs: Any) -> Iterable[JSON]:
        """List quotas for the given workspace.

        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "dimension": "str",  # Optional. The name of the dimension associated with
                      the quota.
                    "holds": 0.0,  # Optional. The amount of the usage that has been reserved but
                      not applied for the current period.
                    "limit": 0.0,  # Optional. The maximum amount of usage allowed for the
                      current period.
                    "period": "str",  # Optional. The time period in which the quota's underlying
                      meter is accumulated. Based on calendar year. 'None' is used for concurrent
                      quotas. Known values are: "None" and "Monthly".
                    "providerId": "str",  # Optional. The unique identifier for the provider.
                    "scope": "str",  # Optional. The scope at which the quota is applied. Known
                      values are: "Workspace" and "Subscription".
                    "utilization": 0.0  # Optional. The amount of the usage that has been applied
                      for the current period.
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                request = build_quotas_list_request(
                    subscription_id=self._config.subscription_id,
                    resource_group_name=self._config.resource_group_name,
                    workspace_name=self._config.workspace_name,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                request.url = self._client.format_url(request.url)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                request.url = self._client.format_url(request.url)

            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=False, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return ItemPaged(get_next, extract_data)


class SessionsOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.quantum._client.QuantumClient`'s
        :attr:`sessions` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def list(self, *, filter: Optional[str] = None, **kwargs: Any) -> Iterable[JSON]:
        """List sessions.

        :keyword filter: OData filter expression supporting eq operator on id, name, providerId,
         target, status, itemType, jobType and lt/gt operators on creationTime, endExecutionTime.
         Default value is None.
        :paramtype filter: str
        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python
                # The response is polymorphic. The following are possible polymorphic responses based
                  off discriminator "itemType":

                # JSON input template for discriminator value "Session":
                item_details = {
                    "id": "str",  # The id of the item. Required.
                    "itemType": "Session",
                    "name": "str",  # The name of the item. It is not required for the name to be
                      unique and it's only used for display purposes. Required.
                    "providerId": "str",  # The unique identifier for the provider. Required.
                    "target": "str",  # The target identifier to run the job. Required.
                    "beginExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item began execution.
                    "costEstimate": {
                        "currencyCode": "str",  # Optional. The currency code.
                        "estimatedTotal": 0.0,  # Optional. The estimated total.
                        "events": [
                            {
                                "amountBilled": 0.0,  # Optional. The amount billed.
                                "amountConsumed": 0.0,  # Optional. The amount
                                  consumed.
                                "dimensionId": "str",  # Optional. The dimension id.
                                "dimensionName": "str",  # Optional. The dimension
                                  name.
                                "measureUnit": "str",  # Optional. The unit of
                                  measure.
                                "unitPrice": 0.0  # Optional. The unit price.
                            }
                        ]
                    },
                    "creationTime": "2020-02-20 00:00:00",  # Optional. The creation time of the
                      item.
                    "endExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item finished execution.
                    "errorData": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str"  # A message describing the error, intended to be
                          suitable for displaying in a user interface. Required.
                    },
                    "jobCount": 0,  # Optional. The number of jobs in the session.
                    "jobFailurePolicy": "Abort",  # Optional. Default value is "Abort". Policy
                      controlling the behavior of the Session when a job in the session fails. Known
                      values are: "Abort" and "Continue".
                    "status": "str"  # Optional. The status of the session. Known values are:
                      "Waiting", "Executing", "Succeeded", "Failed", "Failure(s)", and "TimedOut".
                }

                # response body for status code(s): 200
                response == {
                    "id": "str",  # The id of the item. Required.
                    "itemType": "Session",
                    "name": "str",  # The name of the item. It is not required for the name to be
                      unique and it's only used for display purposes. Required.
                    "providerId": "str",  # The unique identifier for the provider. Required.
                    "target": "str",  # The target identifier to run the job. Required.
                    "beginExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item began execution.
                    "costEstimate": {
                        "currencyCode": "str",  # Optional. The currency code.
                        "estimatedTotal": 0.0,  # Optional. The estimated total.
                        "events": [
                            {
                                "amountBilled": 0.0,  # Optional. The amount billed.
                                "amountConsumed": 0.0,  # Optional. The amount
                                  consumed.
                                "dimensionId": "str",  # Optional. The dimension id.
                                "dimensionName": "str",  # Optional. The dimension
                                  name.
                                "measureUnit": "str",  # Optional. The unit of
                                  measure.
                                "unitPrice": 0.0  # Optional. The unit price.
                            }
                        ]
                    },
                    "creationTime": "2020-02-20 00:00:00",  # Optional. The creation time of the
                      item.
                    "endExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item finished execution.
                    "errorData": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str"  # A message describing the error, intended to be
                          suitable for displaying in a user interface. Required.
                    },
                    "jobCount": 0,  # Optional. The number of jobs in the session.
                    "jobFailurePolicy": "Abort",  # Optional. Default value is "Abort". Policy
                      controlling the behavior of the Session when a job in the session fails. Known
                      values are: "Abort" and "Continue".
                    "status": "str"  # Optional. The status of the session. Known values are:
                      "Waiting", "Executing", "Succeeded", "Failed", "Failure(s)", and "TimedOut".
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                request = build_sessions_list_request(
                    subscription_id=self._config.subscription_id,
                    resource_group_name=self._config.resource_group_name,
                    workspace_name=self._config.workspace_name,
                    filter=filter,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                request.url = self._client.format_url(request.url)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                request.url = self._client.format_url(request.url)

            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=False, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return ItemPaged(get_next, extract_data)

    @distributed_trace
    def get(self, session_id: str, **kwargs: Any) -> JSON:
        """Get session by id.

        :param session_id: Id of the session. Required.
        :type session_id: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python
                # The response is polymorphic. The following are possible polymorphic responses based
                  off discriminator "itemType":

                # JSON input template for discriminator value "Session":
                item_details = {
                    "id": "str",  # The id of the item. Required.
                    "itemType": "Session",
                    "name": "str",  # The name of the item. It is not required for the name to be
                      unique and it's only used for display purposes. Required.
                    "providerId": "str",  # The unique identifier for the provider. Required.
                    "target": "str",  # The target identifier to run the job. Required.
                    "beginExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item began execution.
                    "costEstimate": {
                        "currencyCode": "str",  # Optional. The currency code.
                        "estimatedTotal": 0.0,  # Optional. The estimated total.
                        "events": [
                            {
                                "amountBilled": 0.0,  # Optional. The amount billed.
                                "amountConsumed": 0.0,  # Optional. The amount
                                  consumed.
                                "dimensionId": "str",  # Optional. The dimension id.
                                "dimensionName": "str",  # Optional. The dimension
                                  name.
                                "measureUnit": "str",  # Optional. The unit of
                                  measure.
                                "unitPrice": 0.0  # Optional. The unit price.
                            }
                        ]
                    },
                    "creationTime": "2020-02-20 00:00:00",  # Optional. The creation time of the
                      item.
                    "endExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item finished execution.
                    "errorData": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str"  # A message describing the error, intended to be
                          suitable for displaying in a user interface. Required.
                    },
                    "jobCount": 0,  # Optional. The number of jobs in the session.
                    "jobFailurePolicy": "Abort",  # Optional. Default value is "Abort". Policy
                      controlling the behavior of the Session when a job in the session fails. Known
                      values are: "Abort" and "Continue".
                    "status": "str"  # Optional. The status of the session. Known values are:
                      "Waiting", "Executing", "Succeeded", "Failed", "Failure(s)", and "TimedOut".
                }

                # response body for status code(s): 200
                response == {
                    "id": "str",  # The id of the item. Required.
                    "itemType": "Session",
                    "name": "str",  # The name of the item. It is not required for the name to be
                      unique and it's only used for display purposes. Required.
                    "providerId": "str",  # The unique identifier for the provider. Required.
                    "target": "str",  # The target identifier to run the job. Required.
                    "beginExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item began execution.
                    "costEstimate": {
                        "currencyCode": "str",  # Optional. The currency code.
                        "estimatedTotal": 0.0,  # Optional. The estimated total.
                        "events": [
                            {
                                "amountBilled": 0.0,  # Optional. The amount billed.
                                "amountConsumed": 0.0,  # Optional. The amount
                                  consumed.
                                "dimensionId": "str",  # Optional. The dimension id.
                                "dimensionName": "str",  # Optional. The dimension
                                  name.
                                "measureUnit": "str",  # Optional. The unit of
                                  measure.
                                "unitPrice": 0.0  # Optional. The unit price.
                            }
                        ]
                    },
                    "creationTime": "2020-02-20 00:00:00",  # Optional. The creation time of the
                      item.
                    "endExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item finished execution.
                    "errorData": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str"  # A message describing the error, intended to be
                          suitable for displaying in a user interface. Required.
                    },
                    "jobCount": 0,  # Optional. The number of jobs in the session.
                    "jobFailurePolicy": "Abort",  # Optional. Default value is "Abort". Policy
                      controlling the behavior of the Session when a job in the session fails. Known
                      values are: "Abort" and "Continue".
                    "status": "str"  # Optional. The status of the session. Known values are:
                      "Waiting", "Executing", "Succeeded", "Failed", "Failure(s)", and "TimedOut".
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        request = build_sessions_get_request(
            session_id=session_id,
            subscription_id=self._config.subscription_id,
            resource_group_name=self._config.resource_group_name,
            workspace_name=self._config.workspace_name,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @overload
    def create(self, session_id: str, session: JSON, *, content_type: str = "application/json", **kwargs: Any) -> JSON:
        """Create a session.

        :param session_id: Id of the session. Required.
        :type session_id: str
        :param session: The complete metadata of the session to create. Required.
        :type session: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # The input is polymorphic. The following are possible polymorphic inputs based off
                  discriminator "itemType":

                # JSON input template for discriminator value "Session":
                item_details = {
                    "id": "str",  # The id of the item. Required.
                    "itemType": "Session",
                    "name": "str",  # The name of the item. It is not required for the name to be
                      unique and it's only used for display purposes. Required.
                    "providerId": "str",  # The unique identifier for the provider. Required.
                    "target": "str",  # The target identifier to run the job. Required.
                    "beginExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item began execution.
                    "costEstimate": {
                        "currencyCode": "str",  # Optional. The currency code.
                        "estimatedTotal": 0.0,  # Optional. The estimated total.
                        "events": [
                            {
                                "amountBilled": 0.0,  # Optional. The amount billed.
                                "amountConsumed": 0.0,  # Optional. The amount
                                  consumed.
                                "dimensionId": "str",  # Optional. The dimension id.
                                "dimensionName": "str",  # Optional. The dimension
                                  name.
                                "measureUnit": "str",  # Optional. The unit of
                                  measure.
                                "unitPrice": 0.0  # Optional. The unit price.
                            }
                        ]
                    },
                    "creationTime": "2020-02-20 00:00:00",  # Optional. The creation time of the
                      item.
                    "endExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item finished execution.
                    "errorData": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str"  # A message describing the error, intended to be
                          suitable for displaying in a user interface. Required.
                    },
                    "jobCount": 0,  # Optional. The number of jobs in the session.
                    "jobFailurePolicy": "Abort",  # Optional. Default value is "Abort". Policy
                      controlling the behavior of the Session when a job in the session fails. Known
                      values are: "Abort" and "Continue".
                    "status": "str"  # Optional. The status of the session. Known values are:
                      "Waiting", "Executing", "Succeeded", "Failed", "Failure(s)", and "TimedOut".
                }

                # JSON input template you can fill out and use as your body input.
                session = {
                    "id": "str",  # The id of the item. Required.
                    "itemType": "Session",
                    "name": "str",  # The name of the item. It is not required for the name to be
                      unique and it's only used for display purposes. Required.
                    "providerId": "str",  # The unique identifier for the provider. Required.
                    "target": "str",  # The target identifier to run the job. Required.
                    "beginExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item began execution.
                    "costEstimate": {
                        "currencyCode": "str",  # Optional. The currency code.
                        "estimatedTotal": 0.0,  # Optional. The estimated total.
                        "events": [
                            {
                                "amountBilled": 0.0,  # Optional. The amount billed.
                                "amountConsumed": 0.0,  # Optional. The amount
                                  consumed.
                                "dimensionId": "str",  # Optional. The dimension id.
                                "dimensionName": "str",  # Optional. The dimension
                                  name.
                                "measureUnit": "str",  # Optional. The unit of
                                  measure.
                                "unitPrice": 0.0  # Optional. The unit price.
                            }
                        ]
                    },
                    "creationTime": "2020-02-20 00:00:00",  # Optional. The creation time of the
                      item.
                    "endExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item finished execution.
                    "errorData": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str"  # A message describing the error, intended to be
                          suitable for displaying in a user interface. Required.
                    },
                    "jobCount": 0,  # Optional. The number of jobs in the session.
                    "jobFailurePolicy": "Abort",  # Optional. Default value is "Abort". Policy
                      controlling the behavior of the Session when a job in the session fails. Known
                      values are: "Abort" and "Continue".
                    "status": "str"  # Optional. The status of the session. Known values are:
                      "Waiting", "Executing", "Succeeded", "Failed", "Failure(s)", and "TimedOut".
                }
                # The response is polymorphic. The following are possible polymorphic responses based
                  off discriminator "itemType":

                # JSON input template for discriminator value "Session":
                item_details = {
                    "id": "str",  # The id of the item. Required.
                    "itemType": "Session",
                    "name": "str",  # The name of the item. It is not required for the name to be
                      unique and it's only used for display purposes. Required.
                    "providerId": "str",  # The unique identifier for the provider. Required.
                    "target": "str",  # The target identifier to run the job. Required.
                    "beginExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item began execution.
                    "costEstimate": {
                        "currencyCode": "str",  # Optional. The currency code.
                        "estimatedTotal": 0.0,  # Optional. The estimated total.
                        "events": [
                            {
                                "amountBilled": 0.0,  # Optional. The amount billed.
                                "amountConsumed": 0.0,  # Optional. The amount
                                  consumed.
                                "dimensionId": "str",  # Optional. The dimension id.
                                "dimensionName": "str",  # Optional. The dimension
                                  name.
                                "measureUnit": "str",  # Optional. The unit of
                                  measure.
                                "unitPrice": 0.0  # Optional. The unit price.
                            }
                        ]
                    },
                    "creationTime": "2020-02-20 00:00:00",  # Optional. The creation time of the
                      item.
                    "endExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item finished execution.
                    "errorData": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str"  # A message describing the error, intended to be
                          suitable for displaying in a user interface. Required.
                    },
                    "jobCount": 0,  # Optional. The number of jobs in the session.
                    "jobFailurePolicy": "Abort",  # Optional. Default value is "Abort". Policy
                      controlling the behavior of the Session when a job in the session fails. Known
                      values are: "Abort" and "Continue".
                    "status": "str"  # Optional. The status of the session. Known values are:
                      "Waiting", "Executing", "Succeeded", "Failed", "Failure(s)", and "TimedOut".
                }
                # The response is polymorphic. The following are possible polymorphic responses based
                  off discriminator "itemType":

                # JSON input template for discriminator value "Session":
                item_details = {
                    "id": "str",  # The id of the item. Required.
                    "itemType": "Session",
                    "name": "str",  # The name of the item. It is not required for the name to be
                      unique and it's only used for display purposes. Required.
                    "providerId": "str",  # The unique identifier for the provider. Required.
                    "target": "str",  # The target identifier to run the job. Required.
                    "beginExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item began execution.
                    "costEstimate": {
                        "currencyCode": "str",  # Optional. The currency code.
                        "estimatedTotal": 0.0,  # Optional. The estimated total.
                        "events": [
                            {
                                "amountBilled": 0.0,  # Optional. The amount billed.
                                "amountConsumed": 0.0,  # Optional. The amount
                                  consumed.
                                "dimensionId": "str",  # Optional. The dimension id.
                                "dimensionName": "str",  # Optional. The dimension
                                  name.
                                "measureUnit": "str",  # Optional. The unit of
                                  measure.
                                "unitPrice": 0.0  # Optional. The unit price.
                            }
                        ]
                    },
                    "creationTime": "2020-02-20 00:00:00",  # Optional. The creation time of the
                      item.
                    "endExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item finished execution.
                    "errorData": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str"  # A message describing the error, intended to be
                          suitable for displaying in a user interface. Required.
                    },
                    "jobCount": 0,  # Optional. The number of jobs in the session.
                    "jobFailurePolicy": "Abort",  # Optional. Default value is "Abort". Policy
                      controlling the behavior of the Session when a job in the session fails. Known
                      values are: "Abort" and "Continue".
                    "status": "str"  # Optional. The status of the session. Known values are:
                      "Waiting", "Executing", "Succeeded", "Failed", "Failure(s)", and "TimedOut".
                }

                # response body for status code(s): 200, 201
                response == {
                    "id": "str",  # The id of the item. Required.
                    "itemType": "Session",
                    "name": "str",  # The name of the item. It is not required for the name to be
                      unique and it's only used for display purposes. Required.
                    "providerId": "str",  # The unique identifier for the provider. Required.
                    "target": "str",  # The target identifier to run the job. Required.
                    "beginExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item began execution.
                    "costEstimate": {
                        "currencyCode": "str",  # Optional. The currency code.
                        "estimatedTotal": 0.0,  # Optional. The estimated total.
                        "events": [
                            {
                                "amountBilled": 0.0,  # Optional. The amount billed.
                                "amountConsumed": 0.0,  # Optional. The amount
                                  consumed.
                                "dimensionId": "str",  # Optional. The dimension id.
                                "dimensionName": "str",  # Optional. The dimension
                                  name.
                                "measureUnit": "str",  # Optional. The unit of
                                  measure.
                                "unitPrice": 0.0  # Optional. The unit price.
                            }
                        ]
                    },
                    "creationTime": "2020-02-20 00:00:00",  # Optional. The creation time of the
                      item.
                    "endExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item finished execution.
                    "errorData": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str"  # A message describing the error, intended to be
                          suitable for displaying in a user interface. Required.
                    },
                    "jobCount": 0,  # Optional. The number of jobs in the session.
                    "jobFailurePolicy": "Abort",  # Optional. Default value is "Abort". Policy
                      controlling the behavior of the Session when a job in the session fails. Known
                      values are: "Abort" and "Continue".
                    "status": "str"  # Optional. The status of the session. Known values are:
                      "Waiting", "Executing", "Succeeded", "Failed", "Failure(s)", and "TimedOut".
                }
        """

    @overload
    def create(self, session_id: str, session: IO, *, content_type: str = "application/json", **kwargs: Any) -> JSON:
        """Create a session.

        :param session_id: Id of the session. Required.
        :type session_id: str
        :param session: The complete metadata of the session to create. Required.
        :type session: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python
                # The response is polymorphic. The following are possible polymorphic responses based
                  off discriminator "itemType":

                # JSON input template for discriminator value "Session":
                item_details = {
                    "id": "str",  # The id of the item. Required.
                    "itemType": "Session",
                    "name": "str",  # The name of the item. It is not required for the name to be
                      unique and it's only used for display purposes. Required.
                    "providerId": "str",  # The unique identifier for the provider. Required.
                    "target": "str",  # The target identifier to run the job. Required.
                    "beginExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item began execution.
                    "costEstimate": {
                        "currencyCode": "str",  # Optional. The currency code.
                        "estimatedTotal": 0.0,  # Optional. The estimated total.
                        "events": [
                            {
                                "amountBilled": 0.0,  # Optional. The amount billed.
                                "amountConsumed": 0.0,  # Optional. The amount
                                  consumed.
                                "dimensionId": "str",  # Optional. The dimension id.
                                "dimensionName": "str",  # Optional. The dimension
                                  name.
                                "measureUnit": "str",  # Optional. The unit of
                                  measure.
                                "unitPrice": 0.0  # Optional. The unit price.
                            }
                        ]
                    },
                    "creationTime": "2020-02-20 00:00:00",  # Optional. The creation time of the
                      item.
                    "endExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item finished execution.
                    "errorData": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str"  # A message describing the error, intended to be
                          suitable for displaying in a user interface. Required.
                    },
                    "jobCount": 0,  # Optional. The number of jobs in the session.
                    "jobFailurePolicy": "Abort",  # Optional. Default value is "Abort". Policy
                      controlling the behavior of the Session when a job in the session fails. Known
                      values are: "Abort" and "Continue".
                    "status": "str"  # Optional. The status of the session. Known values are:
                      "Waiting", "Executing", "Succeeded", "Failed", "Failure(s)", and "TimedOut".
                }
                # The response is polymorphic. The following are possible polymorphic responses based
                  off discriminator "itemType":

                # JSON input template for discriminator value "Session":
                item_details = {
                    "id": "str",  # The id of the item. Required.
                    "itemType": "Session",
                    "name": "str",  # The name of the item. It is not required for the name to be
                      unique and it's only used for display purposes. Required.
                    "providerId": "str",  # The unique identifier for the provider. Required.
                    "target": "str",  # The target identifier to run the job. Required.
                    "beginExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item began execution.
                    "costEstimate": {
                        "currencyCode": "str",  # Optional. The currency code.
                        "estimatedTotal": 0.0,  # Optional. The estimated total.
                        "events": [
                            {
                                "amountBilled": 0.0,  # Optional. The amount billed.
                                "amountConsumed": 0.0,  # Optional. The amount
                                  consumed.
                                "dimensionId": "str",  # Optional. The dimension id.
                                "dimensionName": "str",  # Optional. The dimension
                                  name.
                                "measureUnit": "str",  # Optional. The unit of
                                  measure.
                                "unitPrice": 0.0  # Optional. The unit price.
                            }
                        ]
                    },
                    "creationTime": "2020-02-20 00:00:00",  # Optional. The creation time of the
                      item.
                    "endExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item finished execution.
                    "errorData": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str"  # A message describing the error, intended to be
                          suitable for displaying in a user interface. Required.
                    },
                    "jobCount": 0,  # Optional. The number of jobs in the session.
                    "jobFailurePolicy": "Abort",  # Optional. Default value is "Abort". Policy
                      controlling the behavior of the Session when a job in the session fails. Known
                      values are: "Abort" and "Continue".
                    "status": "str"  # Optional. The status of the session. Known values are:
                      "Waiting", "Executing", "Succeeded", "Failed", "Failure(s)", and "TimedOut".
                }

                # response body for status code(s): 200, 201
                response == {
                    "id": "str",  # The id of the item. Required.
                    "itemType": "Session",
                    "name": "str",  # The name of the item. It is not required for the name to be
                      unique and it's only used for display purposes. Required.
                    "providerId": "str",  # The unique identifier for the provider. Required.
                    "target": "str",  # The target identifier to run the job. Required.
                    "beginExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item began execution.
                    "costEstimate": {
                        "currencyCode": "str",  # Optional. The currency code.
                        "estimatedTotal": 0.0,  # Optional. The estimated total.
                        "events": [
                            {
                                "amountBilled": 0.0,  # Optional. The amount billed.
                                "amountConsumed": 0.0,  # Optional. The amount
                                  consumed.
                                "dimensionId": "str",  # Optional. The dimension id.
                                "dimensionName": "str",  # Optional. The dimension
                                  name.
                                "measureUnit": "str",  # Optional. The unit of
                                  measure.
                                "unitPrice": 0.0  # Optional. The unit price.
                            }
                        ]
                    },
                    "creationTime": "2020-02-20 00:00:00",  # Optional. The creation time of the
                      item.
                    "endExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item finished execution.
                    "errorData": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str"  # A message describing the error, intended to be
                          suitable for displaying in a user interface. Required.
                    },
                    "jobCount": 0,  # Optional. The number of jobs in the session.
                    "jobFailurePolicy": "Abort",  # Optional. Default value is "Abort". Policy
                      controlling the behavior of the Session when a job in the session fails. Known
                      values are: "Abort" and "Continue".
                    "status": "str"  # Optional. The status of the session. Known values are:
                      "Waiting", "Executing", "Succeeded", "Failed", "Failure(s)", and "TimedOut".
                }
        """

    @distributed_trace
    def create(self, session_id: str, session: Union[JSON, IO], **kwargs: Any) -> JSON:
        """Create a session.

        :param session_id: Id of the session. Required.
        :type session_id: str
        :param session: The complete metadata of the session to create. Is either a JSON type or a IO
         type. Required.
        :type session: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # The input is polymorphic. The following are possible polymorphic inputs based off
                  discriminator "itemType":

                # JSON input template for discriminator value "Session":
                item_details = {
                    "id": "str",  # The id of the item. Required.
                    "itemType": "Session",
                    "name": "str",  # The name of the item. It is not required for the name to be
                      unique and it's only used for display purposes. Required.
                    "providerId": "str",  # The unique identifier for the provider. Required.
                    "target": "str",  # The target identifier to run the job. Required.
                    "beginExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item began execution.
                    "costEstimate": {
                        "currencyCode": "str",  # Optional. The currency code.
                        "estimatedTotal": 0.0,  # Optional. The estimated total.
                        "events": [
                            {
                                "amountBilled": 0.0,  # Optional. The amount billed.
                                "amountConsumed": 0.0,  # Optional. The amount
                                  consumed.
                                "dimensionId": "str",  # Optional. The dimension id.
                                "dimensionName": "str",  # Optional. The dimension
                                  name.
                                "measureUnit": "str",  # Optional. The unit of
                                  measure.
                                "unitPrice": 0.0  # Optional. The unit price.
                            }
                        ]
                    },
                    "creationTime": "2020-02-20 00:00:00",  # Optional. The creation time of the
                      item.
                    "endExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item finished execution.
                    "errorData": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str"  # A message describing the error, intended to be
                          suitable for displaying in a user interface. Required.
                    },
                    "jobCount": 0,  # Optional. The number of jobs in the session.
                    "jobFailurePolicy": "Abort",  # Optional. Default value is "Abort". Policy
                      controlling the behavior of the Session when a job in the session fails. Known
                      values are: "Abort" and "Continue".
                    "status": "str"  # Optional. The status of the session. Known values are:
                      "Waiting", "Executing", "Succeeded", "Failed", "Failure(s)", and "TimedOut".
                }

                # JSON input template you can fill out and use as your body input.
                session = {
                    "id": "str",  # The id of the item. Required.
                    "itemType": "Session",
                    "name": "str",  # The name of the item. It is not required for the name to be
                      unique and it's only used for display purposes. Required.
                    "providerId": "str",  # The unique identifier for the provider. Required.
                    "target": "str",  # The target identifier to run the job. Required.
                    "beginExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item began execution.
                    "costEstimate": {
                        "currencyCode": "str",  # Optional. The currency code.
                        "estimatedTotal": 0.0,  # Optional. The estimated total.
                        "events": [
                            {
                                "amountBilled": 0.0,  # Optional. The amount billed.
                                "amountConsumed": 0.0,  # Optional. The amount
                                  consumed.
                                "dimensionId": "str",  # Optional. The dimension id.
                                "dimensionName": "str",  # Optional. The dimension
                                  name.
                                "measureUnit": "str",  # Optional. The unit of
                                  measure.
                                "unitPrice": 0.0  # Optional. The unit price.
                            }
                        ]
                    },
                    "creationTime": "2020-02-20 00:00:00",  # Optional. The creation time of the
                      item.
                    "endExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item finished execution.
                    "errorData": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str"  # A message describing the error, intended to be
                          suitable for displaying in a user interface. Required.
                    },
                    "jobCount": 0,  # Optional. The number of jobs in the session.
                    "jobFailurePolicy": "Abort",  # Optional. Default value is "Abort". Policy
                      controlling the behavior of the Session when a job in the session fails. Known
                      values are: "Abort" and "Continue".
                    "status": "str"  # Optional. The status of the session. Known values are:
                      "Waiting", "Executing", "Succeeded", "Failed", "Failure(s)", and "TimedOut".
                }
                # The response is polymorphic. The following are possible polymorphic responses based
                  off discriminator "itemType":

                # JSON input template for discriminator value "Session":
                item_details = {
                    "id": "str",  # The id of the item. Required.
                    "itemType": "Session",
                    "name": "str",  # The name of the item. It is not required for the name to be
                      unique and it's only used for display purposes. Required.
                    "providerId": "str",  # The unique identifier for the provider. Required.
                    "target": "str",  # The target identifier to run the job. Required.
                    "beginExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item began execution.
                    "costEstimate": {
                        "currencyCode": "str",  # Optional. The currency code.
                        "estimatedTotal": 0.0,  # Optional. The estimated total.
                        "events": [
                            {
                                "amountBilled": 0.0,  # Optional. The amount billed.
                                "amountConsumed": 0.0,  # Optional. The amount
                                  consumed.
                                "dimensionId": "str",  # Optional. The dimension id.
                                "dimensionName": "str",  # Optional. The dimension
                                  name.
                                "measureUnit": "str",  # Optional. The unit of
                                  measure.
                                "unitPrice": 0.0  # Optional. The unit price.
                            }
                        ]
                    },
                    "creationTime": "2020-02-20 00:00:00",  # Optional. The creation time of the
                      item.
                    "endExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item finished execution.
                    "errorData": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str"  # A message describing the error, intended to be
                          suitable for displaying in a user interface. Required.
                    },
                    "jobCount": 0,  # Optional. The number of jobs in the session.
                    "jobFailurePolicy": "Abort",  # Optional. Default value is "Abort". Policy
                      controlling the behavior of the Session when a job in the session fails. Known
                      values are: "Abort" and "Continue".
                    "status": "str"  # Optional. The status of the session. Known values are:
                      "Waiting", "Executing", "Succeeded", "Failed", "Failure(s)", and "TimedOut".
                }
                # The response is polymorphic. The following are possible polymorphic responses based
                  off discriminator "itemType":

                # JSON input template for discriminator value "Session":
                item_details = {
                    "id": "str",  # The id of the item. Required.
                    "itemType": "Session",
                    "name": "str",  # The name of the item. It is not required for the name to be
                      unique and it's only used for display purposes. Required.
                    "providerId": "str",  # The unique identifier for the provider. Required.
                    "target": "str",  # The target identifier to run the job. Required.
                    "beginExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item began execution.
                    "costEstimate": {
                        "currencyCode": "str",  # Optional. The currency code.
                        "estimatedTotal": 0.0,  # Optional. The estimated total.
                        "events": [
                            {
                                "amountBilled": 0.0,  # Optional. The amount billed.
                                "amountConsumed": 0.0,  # Optional. The amount
                                  consumed.
                                "dimensionId": "str",  # Optional. The dimension id.
                                "dimensionName": "str",  # Optional. The dimension
                                  name.
                                "measureUnit": "str",  # Optional. The unit of
                                  measure.
                                "unitPrice": 0.0  # Optional. The unit price.
                            }
                        ]
                    },
                    "creationTime": "2020-02-20 00:00:00",  # Optional. The creation time of the
                      item.
                    "endExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item finished execution.
                    "errorData": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str"  # A message describing the error, intended to be
                          suitable for displaying in a user interface. Required.
                    },
                    "jobCount": 0,  # Optional. The number of jobs in the session.
                    "jobFailurePolicy": "Abort",  # Optional. Default value is "Abort". Policy
                      controlling the behavior of the Session when a job in the session fails. Known
                      values are: "Abort" and "Continue".
                    "status": "str"  # Optional. The status of the session. Known values are:
                      "Waiting", "Executing", "Succeeded", "Failed", "Failure(s)", and "TimedOut".
                }

                # response body for status code(s): 200, 201
                response == {
                    "id": "str",  # The id of the item. Required.
                    "itemType": "Session",
                    "name": "str",  # The name of the item. It is not required for the name to be
                      unique and it's only used for display purposes. Required.
                    "providerId": "str",  # The unique identifier for the provider. Required.
                    "target": "str",  # The target identifier to run the job. Required.
                    "beginExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item began execution.
                    "costEstimate": {
                        "currencyCode": "str",  # Optional. The currency code.
                        "estimatedTotal": 0.0,  # Optional. The estimated total.
                        "events": [
                            {
                                "amountBilled": 0.0,  # Optional. The amount billed.
                                "amountConsumed": 0.0,  # Optional. The amount
                                  consumed.
                                "dimensionId": "str",  # Optional. The dimension id.
                                "dimensionName": "str",  # Optional. The dimension
                                  name.
                                "measureUnit": "str",  # Optional. The unit of
                                  measure.
                                "unitPrice": 0.0  # Optional. The unit price.
                            }
                        ]
                    },
                    "creationTime": "2020-02-20 00:00:00",  # Optional. The creation time of the
                      item.
                    "endExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item finished execution.
                    "errorData": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str"  # A message describing the error, intended to be
                          suitable for displaying in a user interface. Required.
                    },
                    "jobCount": 0,  # Optional. The number of jobs in the session.
                    "jobFailurePolicy": "Abort",  # Optional. Default value is "Abort". Policy
                      controlling the behavior of the Session when a job in the session fails. Known
                      values are: "Abort" and "Continue".
                    "status": "str"  # Optional. The status of the session. Known values are:
                      "Waiting", "Executing", "Succeeded", "Failed", "Failure(s)", and "TimedOut".
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(session, (IO, bytes)):
            _content = session
        else:
            _json = session

        request = build_sessions_create_request(
            session_id=session_id,
            subscription_id=self._config.subscription_id,
            resource_group_name=self._config.resource_group_name,
            workspace_name=self._config.workspace_name,
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 201:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def end(self, session_id: str, **kwargs: Any) -> JSON:
        """End a session.

        :param session_id: Id of the session. Required.
        :type session_id: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python
                # The response is polymorphic. The following are possible polymorphic responses based
                  off discriminator "itemType":

                # JSON input template for discriminator value "Session":
                item_details = {
                    "id": "str",  # The id of the item. Required.
                    "itemType": "Session",
                    "name": "str",  # The name of the item. It is not required for the name to be
                      unique and it's only used for display purposes. Required.
                    "providerId": "str",  # The unique identifier for the provider. Required.
                    "target": "str",  # The target identifier to run the job. Required.
                    "beginExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item began execution.
                    "costEstimate": {
                        "currencyCode": "str",  # Optional. The currency code.
                        "estimatedTotal": 0.0,  # Optional. The estimated total.
                        "events": [
                            {
                                "amountBilled": 0.0,  # Optional. The amount billed.
                                "amountConsumed": 0.0,  # Optional. The amount
                                  consumed.
                                "dimensionId": "str",  # Optional. The dimension id.
                                "dimensionName": "str",  # Optional. The dimension
                                  name.
                                "measureUnit": "str",  # Optional. The unit of
                                  measure.
                                "unitPrice": 0.0  # Optional. The unit price.
                            }
                        ]
                    },
                    "creationTime": "2020-02-20 00:00:00",  # Optional. The creation time of the
                      item.
                    "endExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item finished execution.
                    "errorData": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str"  # A message describing the error, intended to be
                          suitable for displaying in a user interface. Required.
                    },
                    "jobCount": 0,  # Optional. The number of jobs in the session.
                    "jobFailurePolicy": "Abort",  # Optional. Default value is "Abort". Policy
                      controlling the behavior of the Session when a job in the session fails. Known
                      values are: "Abort" and "Continue".
                    "status": "str"  # Optional. The status of the session. Known values are:
                      "Waiting", "Executing", "Succeeded", "Failed", "Failure(s)", and "TimedOut".
                }

                # response body for status code(s): 200
                response == {
                    "id": "str",  # The id of the item. Required.
                    "itemType": "Session",
                    "name": "str",  # The name of the item. It is not required for the name to be
                      unique and it's only used for display purposes. Required.
                    "providerId": "str",  # The unique identifier for the provider. Required.
                    "target": "str",  # The target identifier to run the job. Required.
                    "beginExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item began execution.
                    "costEstimate": {
                        "currencyCode": "str",  # Optional. The currency code.
                        "estimatedTotal": 0.0,  # Optional. The estimated total.
                        "events": [
                            {
                                "amountBilled": 0.0,  # Optional. The amount billed.
                                "amountConsumed": 0.0,  # Optional. The amount
                                  consumed.
                                "dimensionId": "str",  # Optional. The dimension id.
                                "dimensionName": "str",  # Optional. The dimension
                                  name.
                                "measureUnit": "str",  # Optional. The unit of
                                  measure.
                                "unitPrice": 0.0  # Optional. The unit price.
                            }
                        ]
                    },
                    "creationTime": "2020-02-20 00:00:00",  # Optional. The creation time of the
                      item.
                    "endExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item finished execution.
                    "errorData": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str"  # A message describing the error, intended to be
                          suitable for displaying in a user interface. Required.
                    },
                    "jobCount": 0,  # Optional. The number of jobs in the session.
                    "jobFailurePolicy": "Abort",  # Optional. Default value is "Abort". Policy
                      controlling the behavior of the Session when a job in the session fails. Known
                      values are: "Abort" and "Continue".
                    "status": "str"  # Optional. The status of the session. Known values are:
                      "Waiting", "Executing", "Succeeded", "Failed", "Failure(s)", and "TimedOut".
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        request = build_sessions_end_request(
            session_id=session_id,
            subscription_id=self._config.subscription_id,
            resource_group_name=self._config.resource_group_name,
            workspace_name=self._config.workspace_name,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @distributed_trace
    def jobs_list(self, session_id: str, *, filter: Optional[str] = None, **kwargs: Any) -> Iterable[JSON]:
        """List jobs in a session.

        :param session_id: Id of the session. Required.
        :type session_id: str
        :keyword filter: OData filter expression supporting eq operator on id, name, providerId,
         target, status, itemType, jobType and lt/gt operators on creationTime, endExecutionTime.
         Default value is None.
        :paramtype filter: str
        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python
                # The response is polymorphic. The following are possible polymorphic responses based
                  off discriminator "itemType":

                # JSON input template for discriminator value "Job":
                item_details = {
                    "containerUri": "str",  # The blob container SAS uri, the container is used
                      to host job data. Required.
                    "id": "str",  # The id of the item. Required.
                    "inputDataFormat": "str",  # The format of the input data. Required.
                    "itemType": "Job",
                    "name": "str",  # The name of the item. It is not required for the name to be
                      unique and it's only used for display purposes. Required.
                    "providerId": "str",  # The unique identifier for the provider. Required.
                    "target": "str",  # The target identifier to run the job. Required.
                    "beginExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item began execution.
                    "cancellationTime": "2020-02-20 00:00:00",  # Optional. The time when a job
                      was successfully cancelled.
                    "costEstimate": {
                        "currencyCode": "str",  # Optional. The currency code.
                        "estimatedTotal": 0.0,  # Optional. The estimated total.
                        "events": [
                            {
                                "amountBilled": 0.0,  # Optional. The amount billed.
                                "amountConsumed": 0.0,  # Optional. The amount
                                  consumed.
                                "dimensionId": "str",  # Optional. The dimension id.
                                "dimensionName": "str",  # Optional. The dimension
                                  name.
                                "measureUnit": "str",  # Optional. The unit of
                                  measure.
                                "unitPrice": 0.0  # Optional. The unit price.
                            }
                        ]
                    },
                    "creationTime": "2020-02-20 00:00:00",  # Optional. The creation time of the
                      item.
                    "endExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item finished execution.
                    "errorData": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str"  # A message describing the error, intended to be
                          suitable for displaying in a user interface. Required.
                    },
                    "inputDataUri": "str",  # Optional. The input blob SAS uri, if specified, it
                      will override the default input blob in the container.
                    "inputParams": {},  # Optional. The input parameters for the job. JSON object
                      used by the target solver. It is expected that the size of this object is small
                      and only used to specify parameters for the execution target, not the input data.
                    "jobType": "str",  # Optional. The type of job. Known values are: "Unknown",
                      "QuantumComputing", "QuantumComputingBatch", and "Optimization".
                    "metadata": {
                        "str": "str"  # Optional. The job metadata. Metadata provides client
                          the ability to store client-specific information.
                    },
                    "outputDataFormat": "str",  # Optional. The format of the output data.
                    "outputDataUri": "str",  # Optional. The output blob SAS uri. When a job
                      finishes successfully, results will be uploaded to this blob.
                    "quantumComputingData": {
                        "count": 0  # Optional. The number of quantum computing items in the
                          job.
                    },
                    "sessionId": "str",  # Optional. The ID of the session that the job is part
                      of.
                    "status": "str",  # Optional. The status of the job. Known values are:
                      "Waiting", "Executing", "Succeeded", "Failed", and "Cancelled".
                    "tags": [
                        "str"  # Optional. List of user-supplied tags associated with the
                          job.
                    ]
                }

                # response body for status code(s): 200
                response == {
                    "containerUri": "str",  # The blob container SAS uri, the container is used
                      to host job data. Required.
                    "id": "str",  # The id of the item. Required.
                    "inputDataFormat": "str",  # The format of the input data. Required.
                    "itemType": "Job",
                    "name": "str",  # The name of the item. It is not required for the name to be
                      unique and it's only used for display purposes. Required.
                    "providerId": "str",  # The unique identifier for the provider. Required.
                    "target": "str",  # The target identifier to run the job. Required.
                    "beginExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item began execution.
                    "cancellationTime": "2020-02-20 00:00:00",  # Optional. The time when a job
                      was successfully cancelled.
                    "costEstimate": {
                        "currencyCode": "str",  # Optional. The currency code.
                        "estimatedTotal": 0.0,  # Optional. The estimated total.
                        "events": [
                            {
                                "amountBilled": 0.0,  # Optional. The amount billed.
                                "amountConsumed": 0.0,  # Optional. The amount
                                  consumed.
                                "dimensionId": "str",  # Optional. The dimension id.
                                "dimensionName": "str",  # Optional. The dimension
                                  name.
                                "measureUnit": "str",  # Optional. The unit of
                                  measure.
                                "unitPrice": 0.0  # Optional. The unit price.
                            }
                        ]
                    },
                    "creationTime": "2020-02-20 00:00:00",  # Optional. The creation time of the
                      item.
                    "endExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item finished execution.
                    "errorData": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str"  # A message describing the error, intended to be
                          suitable for displaying in a user interface. Required.
                    },
                    "inputDataUri": "str",  # Optional. The input blob SAS uri, if specified, it
                      will override the default input blob in the container.
                    "inputParams": {},  # Optional. The input parameters for the job. JSON object
                      used by the target solver. It is expected that the size of this object is small
                      and only used to specify parameters for the execution target, not the input data.
                    "jobType": "str",  # Optional. The type of job. Known values are: "Unknown",
                      "QuantumComputing", "QuantumComputingBatch", and "Optimization".
                    "metadata": {
                        "str": "str"  # Optional. The job metadata. Metadata provides client
                          the ability to store client-specific information.
                    },
                    "outputDataFormat": "str",  # Optional. The format of the output data.
                    "outputDataUri": "str",  # Optional. The output blob SAS uri. When a job
                      finishes successfully, results will be uploaded to this blob.
                    "quantumComputingData": {
                        "count": 0  # Optional. The number of quantum computing items in the
                          job.
                    },
                    "sessionId": "str",  # Optional. The ID of the session that the job is part
                      of.
                    "status": "str",  # Optional. The status of the job. Known values are:
                      "Waiting", "Executing", "Succeeded", "Failed", and "Cancelled".
                    "tags": [
                        "str"  # Optional. List of user-supplied tags associated with the
                          job.
                    ]
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                request = build_sessions_jobs_list_request(
                    session_id=session_id,
                    subscription_id=self._config.subscription_id,
                    resource_group_name=self._config.resource_group_name,
                    workspace_name=self._config.workspace_name,
                    filter=filter,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                request.url = self._client.format_url(request.url)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                request.url = self._client.format_url(request.url)

            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=False, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return ItemPaged(get_next, extract_data)


class TopLevelItemsOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.quantum._client.QuantumClient`'s
        :attr:`top_level_items` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def list(self, *, filter: Optional[str] = None, **kwargs: Any) -> Iterable[JSON]:
        """List top-level items.

        :keyword filter: OData filter expression supporting eq operator on id, name, providerId,
         target, status, itemType, jobType and lt/gt operators on creationTime, endExecutionTime.
         Default value is None.
        :paramtype filter: str
        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python
                # The response is polymorphic. The following are possible polymorphic responses based
                  off discriminator "itemType":

                # JSON input template for discriminator value "Job":
                item_details = {
                    "containerUri": "str",  # The blob container SAS uri, the container is used
                      to host job data. Required.
                    "id": "str",  # The id of the item. Required.
                    "inputDataFormat": "str",  # The format of the input data. Required.
                    "itemType": "Job",
                    "name": "str",  # The name of the item. It is not required for the name to be
                      unique and it's only used for display purposes. Required.
                    "providerId": "str",  # The unique identifier for the provider. Required.
                    "target": "str",  # The target identifier to run the job. Required.
                    "beginExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item began execution.
                    "cancellationTime": "2020-02-20 00:00:00",  # Optional. The time when a job
                      was successfully cancelled.
                    "costEstimate": {
                        "currencyCode": "str",  # Optional. The currency code.
                        "estimatedTotal": 0.0,  # Optional. The estimated total.
                        "events": [
                            {
                                "amountBilled": 0.0,  # Optional. The amount billed.
                                "amountConsumed": 0.0,  # Optional. The amount
                                  consumed.
                                "dimensionId": "str",  # Optional. The dimension id.
                                "dimensionName": "str",  # Optional. The dimension
                                  name.
                                "measureUnit": "str",  # Optional. The unit of
                                  measure.
                                "unitPrice": 0.0  # Optional. The unit price.
                            }
                        ]
                    },
                    "creationTime": "2020-02-20 00:00:00",  # Optional. The creation time of the
                      item.
                    "endExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item finished execution.
                    "errorData": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str"  # A message describing the error, intended to be
                          suitable for displaying in a user interface. Required.
                    },
                    "inputDataUri": "str",  # Optional. The input blob SAS uri, if specified, it
                      will override the default input blob in the container.
                    "inputParams": {},  # Optional. The input parameters for the job. JSON object
                      used by the target solver. It is expected that the size of this object is small
                      and only used to specify parameters for the execution target, not the input data.
                    "jobType": "str",  # Optional. The type of job. Known values are: "Unknown",
                      "QuantumComputing", "QuantumComputingBatch", and "Optimization".
                    "metadata": {
                        "str": "str"  # Optional. The job metadata. Metadata provides client
                          the ability to store client-specific information.
                    },
                    "outputDataFormat": "str",  # Optional. The format of the output data.
                    "outputDataUri": "str",  # Optional. The output blob SAS uri. When a job
                      finishes successfully, results will be uploaded to this blob.
                    "quantumComputingData": {
                        "count": 0  # Optional. The number of quantum computing items in the
                          job.
                    },
                    "sessionId": "str",  # Optional. The ID of the session that the job is part
                      of.
                    "status": "str",  # Optional. The status of the job. Known values are:
                      "Waiting", "Executing", "Succeeded", "Failed", and "Cancelled".
                    "tags": [
                        "str"  # Optional. List of user-supplied tags associated with the
                          job.
                    ]
                }

                # JSON input template for discriminator value "Session":
                item_details = {
                    "id": "str",  # The id of the item. Required.
                    "itemType": "Session",
                    "name": "str",  # The name of the item. It is not required for the name to be
                      unique and it's only used for display purposes. Required.
                    "providerId": "str",  # The unique identifier for the provider. Required.
                    "target": "str",  # The target identifier to run the job. Required.
                    "beginExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item began execution.
                    "costEstimate": {
                        "currencyCode": "str",  # Optional. The currency code.
                        "estimatedTotal": 0.0,  # Optional. The estimated total.
                        "events": [
                            {
                                "amountBilled": 0.0,  # Optional. The amount billed.
                                "amountConsumed": 0.0,  # Optional. The amount
                                  consumed.
                                "dimensionId": "str",  # Optional. The dimension id.
                                "dimensionName": "str",  # Optional. The dimension
                                  name.
                                "measureUnit": "str",  # Optional. The unit of
                                  measure.
                                "unitPrice": 0.0  # Optional. The unit price.
                            }
                        ]
                    },
                    "creationTime": "2020-02-20 00:00:00",  # Optional. The creation time of the
                      item.
                    "endExecutionTime": "2020-02-20 00:00:00",  # Optional. The time when the
                      item finished execution.
                    "errorData": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str"  # A message describing the error, intended to be
                          suitable for displaying in a user interface. Required.
                    },
                    "jobCount": 0,  # Optional. The number of jobs in the session.
                    "jobFailurePolicy": "Abort",  # Optional. Default value is "Abort". Policy
                      controlling the behavior of the Session when a job in the session fails. Known
                      values are: "Abort" and "Continue".
                    "status": "str"  # Optional. The status of the session. Known values are:
                      "Waiting", "Executing", "Succeeded", "Failed", "Failure(s)", and "TimedOut".
                }

                # response body for status code(s): 200
                response == item_details
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                request = build_top_level_items_list_request(
                    subscription_id=self._config.subscription_id,
                    resource_group_name=self._config.resource_group_name,
                    workspace_name=self._config.workspace_name,
                    filter=filter,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                request.url = self._client.format_url(request.url)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                request.url = self._client.format_url(request.url)

            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=False, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return ItemPaged(get_next, extract_data)
